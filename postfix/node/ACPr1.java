/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class ACPr1 extends PPr1
{
    private TMinus _minus_;
    private PS _s_;
    private PF _f_;
    private PMayus0 _mayus0_;

    public ACPr1()
    {
        // Constructor
    }

    public ACPr1(
        @SuppressWarnings("hiding") TMinus _minus_,
        @SuppressWarnings("hiding") PS _s_,
        @SuppressWarnings("hiding") PF _f_,
        @SuppressWarnings("hiding") PMayus0 _mayus0_)
    {
        // Constructor
        setMinus(_minus_);

        setS(_s_);

        setF(_f_);

        setMayus0(_mayus0_);

    }

    @Override
    public Object clone()
    {
        return new ACPr1(
            cloneNode(this._minus_),
            cloneNode(this._s_),
            cloneNode(this._f_),
            cloneNode(this._mayus0_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACPr1(this);
    }

    public TMinus getMinus()
    {
        return this._minus_;
    }

    public void setMinus(TMinus node)
    {
        if(this._minus_ != null)
        {
            this._minus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._minus_ = node;
    }

    public PS getS()
    {
        return this._s_;
    }

    public void setS(PS node)
    {
        if(this._s_ != null)
        {
            this._s_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._s_ = node;
    }

    public PF getF()
    {
        return this._f_;
    }

    public void setF(PF node)
    {
        if(this._f_ != null)
        {
            this._f_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._f_ = node;
    }

    public PMayus0 getMayus0()
    {
        return this._mayus0_;
    }

    public void setMayus0(PMayus0 node)
    {
        if(this._mayus0_ != null)
        {
            this._mayus0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mayus0_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._minus_)
            + toString(this._s_)
            + toString(this._f_)
            + toString(this._mayus0_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._minus_ == child)
        {
            this._minus_ = null;
            return;
        }

        if(this._s_ == child)
        {
            this._s_ = null;
            return;
        }

        if(this._f_ == child)
        {
            this._f_ = null;
            return;
        }

        if(this._mayus0_ == child)
        {
            this._mayus0_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._minus_ == oldChild)
        {
            setMinus((TMinus) newChild);
            return;
        }

        if(this._s_ == oldChild)
        {
            setS((PS) newChild);
            return;
        }

        if(this._f_ == oldChild)
        {
            setF((PF) newChild);
            return;
        }

        if(this._mayus0_ == oldChild)
        {
            setMayus0((PMayus0) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

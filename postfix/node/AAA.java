/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AAA extends PA
{
    private TLine _line_;
    private PL1 _l1_;

    public AAA()
    {
        // Constructor
    }

    public AAA(
        @SuppressWarnings("hiding") TLine _line_,
        @SuppressWarnings("hiding") PL1 _l1_)
    {
        // Constructor
        setLine(_line_);

        setL1(_l1_);

    }

    @Override
    public Object clone()
    {
        return new AAA(
            cloneNode(this._line_),
            cloneNode(this._l1_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAA(this);
    }

    public TLine getLine()
    {
        return this._line_;
    }

    public void setLine(TLine node)
    {
        if(this._line_ != null)
        {
            this._line_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._line_ = node;
    }

    public PL1 getL1()
    {
        return this._l1_;
    }

    public void setL1(PL1 node)
    {
        if(this._l1_ != null)
        {
            this._l1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l1_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._line_)
            + toString(this._l1_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._line_ == child)
        {
            this._line_ = null;
            return;
        }

        if(this._l1_ == child)
        {
            this._l1_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._line_ == oldChild)
        {
            setLine((TLine) newChild);
            return;
        }

        if(this._l1_ == oldChild)
        {
            setL1((PL1) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

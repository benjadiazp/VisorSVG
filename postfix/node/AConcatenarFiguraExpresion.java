/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AConcatenarFiguraExpresion extends PExpresion
{
    private PExpresion _expresion_;
    private PPr1 _pr1_;

    public AConcatenarFiguraExpresion()
    {
        // Constructor
    }

    public AConcatenarFiguraExpresion(
        @SuppressWarnings("hiding") PExpresion _expresion_,
        @SuppressWarnings("hiding") PPr1 _pr1_)
    {
        // Constructor
        setExpresion(_expresion_);

        setPr1(_pr1_);

    }

    @Override
    public Object clone()
    {
        return new AConcatenarFiguraExpresion(
            cloneNode(this._expresion_),
            cloneNode(this._pr1_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConcatenarFiguraExpresion(this);
    }

    public PExpresion getExpresion()
    {
        return this._expresion_;
    }

    public void setExpresion(PExpresion node)
    {
        if(this._expresion_ != null)
        {
            this._expresion_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expresion_ = node;
    }

    public PPr1 getPr1()
    {
        return this._pr1_;
    }

    public void setPr1(PPr1 node)
    {
        if(this._pr1_ != null)
        {
            this._pr1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pr1_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expresion_)
            + toString(this._pr1_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expresion_ == child)
        {
            this._expresion_ = null;
            return;
        }

        if(this._pr1_ == child)
        {
            this._pr1_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expresion_ == oldChild)
        {
            setExpresion((PExpresion) newChild);
            return;
        }

        if(this._pr1_ == oldChild)
        {
            setPr1((PPr1) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

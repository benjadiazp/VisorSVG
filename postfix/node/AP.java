/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AP extends PP
{
    private TPoints _points_;
    private TIg _ig_;
    private TCo _co_;
    private PP0 _p0_;
    private TCo _a_;

    public AP()
    {
        // Constructor
    }

    public AP(
        @SuppressWarnings("hiding") TPoints _points_,
        @SuppressWarnings("hiding") TIg _ig_,
        @SuppressWarnings("hiding") TCo _co_,
        @SuppressWarnings("hiding") PP0 _p0_,
        @SuppressWarnings("hiding") TCo _a_)
    {
        // Constructor
        setPoints(_points_);

        setIg(_ig_);

        setCo(_co_);

        setP0(_p0_);

        setA(_a_);

    }

    @Override
    public Object clone()
    {
        return new AP(
            cloneNode(this._points_),
            cloneNode(this._ig_),
            cloneNode(this._co_),
            cloneNode(this._p0_),
            cloneNode(this._a_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP(this);
    }

    public TPoints getPoints()
    {
        return this._points_;
    }

    public void setPoints(TPoints node)
    {
        if(this._points_ != null)
        {
            this._points_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._points_ = node;
    }

    public TIg getIg()
    {
        return this._ig_;
    }

    public void setIg(TIg node)
    {
        if(this._ig_ != null)
        {
            this._ig_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ig_ = node;
    }

    public TCo getCo()
    {
        return this._co_;
    }

    public void setCo(TCo node)
    {
        if(this._co_ != null)
        {
            this._co_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._co_ = node;
    }

    public PP0 getP0()
    {
        return this._p0_;
    }

    public void setP0(PP0 node)
    {
        if(this._p0_ != null)
        {
            this._p0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._p0_ = node;
    }

    public TCo getA()
    {
        return this._a_;
    }

    public void setA(TCo node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._points_)
            + toString(this._ig_)
            + toString(this._co_)
            + toString(this._p0_)
            + toString(this._a_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._points_ == child)
        {
            this._points_ = null;
            return;
        }

        if(this._ig_ == child)
        {
            this._ig_ = null;
            return;
        }

        if(this._co_ == child)
        {
            this._co_ = null;
            return;
        }

        if(this._p0_ == child)
        {
            this._p0_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._points_ == oldChild)
        {
            setPoints((TPoints) newChild);
            return;
        }

        if(this._ig_ == oldChild)
        {
            setIg((TIg) newChild);
            return;
        }

        if(this._co_ == oldChild)
        {
            setCo((TCo) newChild);
            return;
        }

        if(this._p0_ == oldChild)
        {
            setP0((PP0) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((TCo) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

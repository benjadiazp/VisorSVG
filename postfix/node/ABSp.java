/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class ABSp extends PSp
{
    private PSp _sp_;
    private PSp0 _sp0_;

    public ABSp()
    {
        // Constructor
    }

    public ABSp(
        @SuppressWarnings("hiding") PSp _sp_,
        @SuppressWarnings("hiding") PSp0 _sp0_)
    {
        // Constructor
        setSp(_sp_);

        setSp0(_sp0_);

    }

    @Override
    public Object clone()
    {
        return new ABSp(
            cloneNode(this._sp_),
            cloneNode(this._sp0_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABSp(this);
    }

    public PSp getSp()
    {
        return this._sp_;
    }

    public void setSp(PSp node)
    {
        if(this._sp_ != null)
        {
            this._sp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sp_ = node;
    }

    public PSp0 getSp0()
    {
        return this._sp0_;
    }

    public void setSp0(PSp0 node)
    {
        if(this._sp0_ != null)
        {
            this._sp0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sp0_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sp_)
            + toString(this._sp0_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sp_ == child)
        {
            this._sp_ = null;
            return;
        }

        if(this._sp0_ == child)
        {
            this._sp0_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._sp_ == oldChild)
        {
            setSp((PSp) newChild);
            return;
        }

        if(this._sp0_ == oldChild)
        {
            setSp0((PSp0) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class ABSp extends PSp
{
    private PFi _fi_;
    private TPc _pc_;
    private PStw _stw_;
    private TPc _a_;
    private PSt _st_;

    public ABSp()
    {
        // Constructor
    }

    public ABSp(
        @SuppressWarnings("hiding") PFi _fi_,
        @SuppressWarnings("hiding") TPc _pc_,
        @SuppressWarnings("hiding") PStw _stw_,
        @SuppressWarnings("hiding") TPc _a_,
        @SuppressWarnings("hiding") PSt _st_)
    {
        // Constructor
        setFi(_fi_);

        setPc(_pc_);

        setStw(_stw_);

        setA(_a_);

        setSt(_st_);

    }

    @Override
    public Object clone()
    {
        return new ABSp(
            cloneNode(this._fi_),
            cloneNode(this._pc_),
            cloneNode(this._stw_),
            cloneNode(this._a_),
            cloneNode(this._st_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABSp(this);
    }

    public PFi getFi()
    {
        return this._fi_;
    }

    public void setFi(PFi node)
    {
        if(this._fi_ != null)
        {
            this._fi_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fi_ = node;
    }

    public TPc getPc()
    {
        return this._pc_;
    }

    public void setPc(TPc node)
    {
        if(this._pc_ != null)
        {
            this._pc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pc_ = node;
    }

    public PStw getStw()
    {
        return this._stw_;
    }

    public void setStw(PStw node)
    {
        if(this._stw_ != null)
        {
            this._stw_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stw_ = node;
    }

    public TPc getA()
    {
        return this._a_;
    }

    public void setA(TPc node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public PSt getSt()
    {
        return this._st_;
    }

    public void setSt(PSt node)
    {
        if(this._st_ != null)
        {
            this._st_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._st_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fi_)
            + toString(this._pc_)
            + toString(this._stw_)
            + toString(this._a_)
            + toString(this._st_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fi_ == child)
        {
            this._fi_ = null;
            return;
        }

        if(this._pc_ == child)
        {
            this._pc_ = null;
            return;
        }

        if(this._stw_ == child)
        {
            this._stw_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._st_ == child)
        {
            this._st_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fi_ == oldChild)
        {
            setFi((PFi) newChild);
            return;
        }

        if(this._pc_ == oldChild)
        {
            setPc((TPc) newChild);
            return;
        }

        if(this._stw_ == oldChild)
        {
            setStw((PStw) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((TPc) newChild);
            return;
        }

        if(this._st_ == oldChild)
        {
            setSt((PSt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AAC1 extends PC1
{
    private PAtt _att_;
    private PC2 _c2_;

    public AAC1()
    {
        // Constructor
    }

    public AAC1(
        @SuppressWarnings("hiding") PAtt _att_,
        @SuppressWarnings("hiding") PC2 _c2_)
    {
        // Constructor
        setAtt(_att_);

        setC2(_c2_);

    }

    @Override
    public Object clone()
    {
        return new AAC1(
            cloneNode(this._att_),
            cloneNode(this._c2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAC1(this);
    }

    public PAtt getAtt()
    {
        return this._att_;
    }

    public void setAtt(PAtt node)
    {
        if(this._att_ != null)
        {
            this._att_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._att_ = node;
    }

    public PC2 getC2()
    {
        return this._c2_;
    }

    public void setC2(PC2 node)
    {
        if(this._c2_ != null)
        {
            this._c2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._att_)
            + toString(this._c2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._att_ == child)
        {
            this._att_ = null;
            return;
        }

        if(this._c2_ == child)
        {
            this._c2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._att_ == oldChild)
        {
            setAtt((PAtt) newChild);
            return;
        }

        if(this._c2_ == oldChild)
        {
            setC2((PC2) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class ADim extends PDim
{
    private TWidth _width_;
    private TIg _ig_;
    private PNum _num_;
    private THeight _height_;
    private TIg _a_;
    private PNum _b_;

    public ADim()
    {
        // Constructor
    }

    public ADim(
        @SuppressWarnings("hiding") TWidth _width_,
        @SuppressWarnings("hiding") TIg _ig_,
        @SuppressWarnings("hiding") PNum _num_,
        @SuppressWarnings("hiding") THeight _height_,
        @SuppressWarnings("hiding") TIg _a_,
        @SuppressWarnings("hiding") PNum _b_)
    {
        // Constructor
        setWidth(_width_);

        setIg(_ig_);

        setNum(_num_);

        setHeight(_height_);

        setA(_a_);

        setB(_b_);

    }

    @Override
    public Object clone()
    {
        return new ADim(
            cloneNode(this._width_),
            cloneNode(this._ig_),
            cloneNode(this._num_),
            cloneNode(this._height_),
            cloneNode(this._a_),
            cloneNode(this._b_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADim(this);
    }

    public TWidth getWidth()
    {
        return this._width_;
    }

    public void setWidth(TWidth node)
    {
        if(this._width_ != null)
        {
            this._width_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._width_ = node;
    }

    public TIg getIg()
    {
        return this._ig_;
    }

    public void setIg(TIg node)
    {
        if(this._ig_ != null)
        {
            this._ig_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ig_ = node;
    }

    public PNum getNum()
    {
        return this._num_;
    }

    public void setNum(PNum node)
    {
        if(this._num_ != null)
        {
            this._num_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._num_ = node;
    }

    public THeight getHeight()
    {
        return this._height_;
    }

    public void setHeight(THeight node)
    {
        if(this._height_ != null)
        {
            this._height_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._height_ = node;
    }

    public TIg getA()
    {
        return this._a_;
    }

    public void setA(TIg node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public PNum getB()
    {
        return this._b_;
    }

    public void setB(PNum node)
    {
        if(this._b_ != null)
        {
            this._b_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._b_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._width_)
            + toString(this._ig_)
            + toString(this._num_)
            + toString(this._height_)
            + toString(this._a_)
            + toString(this._b_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._width_ == child)
        {
            this._width_ = null;
            return;
        }

        if(this._ig_ == child)
        {
            this._ig_ = null;
            return;
        }

        if(this._num_ == child)
        {
            this._num_ = null;
            return;
        }

        if(this._height_ == child)
        {
            this._height_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._b_ == child)
        {
            this._b_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._width_ == oldChild)
        {
            setWidth((TWidth) newChild);
            return;
        }

        if(this._ig_ == oldChild)
        {
            setIg((TIg) newChild);
            return;
        }

        if(this._num_ == oldChild)
        {
            setNum((PNum) newChild);
            return;
        }

        if(this._height_ == oldChild)
        {
            setHeight((THeight) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((TIg) newChild);
            return;
        }

        if(this._b_ == oldChild)
        {
            setB((PNum) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

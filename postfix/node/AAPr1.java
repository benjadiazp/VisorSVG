/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AAPr1 extends PPr1
{
    private TMinus _minus_;
    private PA _a_;
    private PS _s_;
    private TMayus _mayus_;

    public AAPr1()
    {
        // Constructor
    }

    public AAPr1(
        @SuppressWarnings("hiding") TMinus _minus_,
        @SuppressWarnings("hiding") PA _a_,
        @SuppressWarnings("hiding") PS _s_,
        @SuppressWarnings("hiding") TMayus _mayus_)
    {
        // Constructor
        setMinus(_minus_);

        setA(_a_);

        setS(_s_);

        setMayus(_mayus_);

    }

    @Override
    public Object clone()
    {
        return new AAPr1(
            cloneNode(this._minus_),
            cloneNode(this._a_),
            cloneNode(this._s_),
            cloneNode(this._mayus_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAPr1(this);
    }

    public TMinus getMinus()
    {
        return this._minus_;
    }

    public void setMinus(TMinus node)
    {
        if(this._minus_ != null)
        {
            this._minus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._minus_ = node;
    }

    public PA getA()
    {
        return this._a_;
    }

    public void setA(PA node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    public PS getS()
    {
        return this._s_;
    }

    public void setS(PS node)
    {
        if(this._s_ != null)
        {
            this._s_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._s_ = node;
    }

    public TMayus getMayus()
    {
        return this._mayus_;
    }

    public void setMayus(TMayus node)
    {
        if(this._mayus_ != null)
        {
            this._mayus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mayus_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._minus_)
            + toString(this._a_)
            + toString(this._s_)
            + toString(this._mayus_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._minus_ == child)
        {
            this._minus_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        if(this._s_ == child)
        {
            this._s_ = null;
            return;
        }

        if(this._mayus_ == child)
        {
            this._mayus_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._minus_ == oldChild)
        {
            setMinus((TMinus) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((PA) newChild);
            return;
        }

        if(this._s_ == oldChild)
        {
            setS((PS) newChild);
            return;
        }

        if(this._mayus_ == oldChild)
        {
            setMayus((TMayus) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class ACSp4 extends PSp4
{
    private TStrokew _strokew_;
    private TDosp _dosp_;
    private TN _n_;

    public ACSp4()
    {
        // Constructor
    }

    public ACSp4(
        @SuppressWarnings("hiding") TStrokew _strokew_,
        @SuppressWarnings("hiding") TDosp _dosp_,
        @SuppressWarnings("hiding") TN _n_)
    {
        // Constructor
        setStrokew(_strokew_);

        setDosp(_dosp_);

        setN(_n_);

    }

    @Override
    public Object clone()
    {
        return new ACSp4(
            cloneNode(this._strokew_),
            cloneNode(this._dosp_),
            cloneNode(this._n_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACSp4(this);
    }

    public TStrokew getStrokew()
    {
        return this._strokew_;
    }

    public void setStrokew(TStrokew node)
    {
        if(this._strokew_ != null)
        {
            this._strokew_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._strokew_ = node;
    }

    public TDosp getDosp()
    {
        return this._dosp_;
    }

    public void setDosp(TDosp node)
    {
        if(this._dosp_ != null)
        {
            this._dosp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dosp_ = node;
    }

    public TN getN()
    {
        return this._n_;
    }

    public void setN(TN node)
    {
        if(this._n_ != null)
        {
            this._n_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._n_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._strokew_)
            + toString(this._dosp_)
            + toString(this._n_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._strokew_ == child)
        {
            this._strokew_ = null;
            return;
        }

        if(this._dosp_ == child)
        {
            this._dosp_ = null;
            return;
        }

        if(this._n_ == child)
        {
            this._n_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._strokew_ == oldChild)
        {
            setStrokew((TStrokew) newChild);
            return;
        }

        if(this._dosp_ == oldChild)
        {
            setDosp((TDosp) newChild);
            return;
        }

        if(this._n_ == oldChild)
        {
            setN((TN) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AAAtt0 extends PAtt0
{
    private TFill _fill_;
    private TIg _ig_;
    private TCo _co_;
    private TC0 _c0_;
    private TCo _a_;

    public AAAtt0()
    {
        // Constructor
    }

    public AAAtt0(
        @SuppressWarnings("hiding") TFill _fill_,
        @SuppressWarnings("hiding") TIg _ig_,
        @SuppressWarnings("hiding") TCo _co_,
        @SuppressWarnings("hiding") TC0 _c0_,
        @SuppressWarnings("hiding") TCo _a_)
    {
        // Constructor
        setFill(_fill_);

        setIg(_ig_);

        setCo(_co_);

        setC0(_c0_);

        setA(_a_);

    }

    @Override
    public Object clone()
    {
        return new AAAtt0(
            cloneNode(this._fill_),
            cloneNode(this._ig_),
            cloneNode(this._co_),
            cloneNode(this._c0_),
            cloneNode(this._a_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAAtt0(this);
    }

    public TFill getFill()
    {
        return this._fill_;
    }

    public void setFill(TFill node)
    {
        if(this._fill_ != null)
        {
            this._fill_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fill_ = node;
    }

    public TIg getIg()
    {
        return this._ig_;
    }

    public void setIg(TIg node)
    {
        if(this._ig_ != null)
        {
            this._ig_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ig_ = node;
    }

    public TCo getCo()
    {
        return this._co_;
    }

    public void setCo(TCo node)
    {
        if(this._co_ != null)
        {
            this._co_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._co_ = node;
    }

    public TC0 getC0()
    {
        return this._c0_;
    }

    public void setC0(TC0 node)
    {
        if(this._c0_ != null)
        {
            this._c0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c0_ = node;
    }

    public TCo getA()
    {
        return this._a_;
    }

    public void setA(TCo node)
    {
        if(this._a_ != null)
        {
            this._a_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._fill_)
            + toString(this._ig_)
            + toString(this._co_)
            + toString(this._c0_)
            + toString(this._a_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._fill_ == child)
        {
            this._fill_ = null;
            return;
        }

        if(this._ig_ == child)
        {
            this._ig_ = null;
            return;
        }

        if(this._co_ == child)
        {
            this._co_ = null;
            return;
        }

        if(this._c0_ == child)
        {
            this._c0_ = null;
            return;
        }

        if(this._a_ == child)
        {
            this._a_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._fill_ == oldChild)
        {
            setFill((TFill) newChild);
            return;
        }

        if(this._ig_ == oldChild)
        {
            setIg((TIg) newChild);
            return;
        }

        if(this._co_ == oldChild)
        {
            setCo((TCo) newChild);
            return;
        }

        if(this._c0_ == oldChild)
        {
            setC0((TC0) newChild);
            return;
        }

        if(this._a_ == oldChild)
        {
            setA((TCo) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.parser;

import postfix.lexer.*;
import postfix.node.*;
import postfix.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AStart */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AUnaFiguraExp */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AConcatenarFiguraExp */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAPr1 */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ABPr1 */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ACPr1 */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAMayus0 */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ABMayus0 */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AFinFigura */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AANombreFigura */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ABNombreFigura */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce ACNombreFigura */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce ADNombreFigura */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list, false);
            }
            break;
            case 13: /* reduce AENombreFigura */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AFNombreFigura */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce AAF */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce ABF */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list, false);
            }
            break;
            case 17: /* reduce ACF */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce ADF */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce AEF */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list, false);
            }
            break;
            case 20: /* reduce AFF */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list, false);
            }
            break;
            case 21: /* reduce AAAtt */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list, false);
            }
            break;
            case 22: /* reduce ABAtt */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list, false);
            }
            break;
            case 23: /* reduce AAAtt0 */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce ABAtt0 */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list, false);
            }
            break;
            case 25: /* reduce ACAtt0 */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list, false);
            }
            break;
            case 26: /* reduce AAL1 */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list, false);
            }
            break;
            case 27: /* reduce ABL1 */
            {
                ArrayList<Object> list = new27();
                push(goTo(9), list, false);
            }
            break;
            case 28: /* reduce ACL1 */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list, false);
            }
            break;
            case 29: /* reduce ADL1 */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list, false);
            }
            break;
            case 30: /* reduce AL0 */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list, false);
            }
            break;
            case 31: /* reduce AAC1 */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list, false);
            }
            break;
            case 32: /* reduce ABC1 */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list, false);
            }
            break;
            case 33: /* reduce ACC1 */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list, false);
            }
            break;
            case 34: /* reduce ADC1 */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list, false);
            }
            break;
            case 35: /* reduce AC2 */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list, false);
            }
            break;
            case 36: /* reduce AAR1 */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list, false);
            }
            break;
            case 37: /* reduce ABR1 */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list, false);
            }
            break;
            case 38: /* reduce ACR1 */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list, false);
            }
            break;
            case 39: /* reduce ADR1 */
            {
                ArrayList<Object> list = new39();
                push(goTo(13), list, false);
            }
            break;
            case 40: /* reduce AR2 */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list, false);
            }
            break;
            case 41: /* reduce AAE1 */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list, false);
            }
            break;
            case 42: /* reduce ABE1 */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list, false);
            }
            break;
            case 43: /* reduce ACE1 */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list, false);
            }
            break;
            case 44: /* reduce ADE1 */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list, false);
            }
            break;
            case 45: /* reduce AE0 */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list, false);
            }
            break;
            case 46: /* reduce ACoorx */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list, false);
            }
            break;
            case 47: /* reduce ACoory */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list, false);
            }
            break;
            case 48: /* reduce ACoorx2 */
            {
                ArrayList<Object> list = new48();
                push(goTo(19), list, false);
            }
            break;
            case 49: /* reduce ACoory2 */
            {
                ArrayList<Object> list = new49();
                push(goTo(20), list, false);
            }
            break;
            case 50: /* reduce ACoorcx */
            {
                ArrayList<Object> list = new50();
                push(goTo(21), list, false);
            }
            break;
            case 51: /* reduce ACoorcy */
            {
                ArrayList<Object> list = new51();
                push(goTo(22), list, false);
            }
            break;
            case 52: /* reduce ARad */
            {
                ArrayList<Object> list = new52();
                push(goTo(23), list, false);
            }
            break;
            case 53: /* reduce ACoorx0 */
            {
                ArrayList<Object> list = new53();
                push(goTo(24), list, false);
            }
            break;
            case 54: /* reduce ACoory0 */
            {
                ArrayList<Object> list = new54();
                push(goTo(25), list, false);
            }
            break;
            case 55: /* reduce AWid */
            {
                ArrayList<Object> list = new55();
                push(goTo(26), list, false);
            }
            break;
            case 56: /* reduce AHei */
            {
                ArrayList<Object> list = new56();
                push(goTo(27), list, false);
            }
            break;
            case 57: /* reduce ARadx */
            {
                ArrayList<Object> list = new57();
                push(goTo(28), list, false);
            }
            break;
            case 58: /* reduce ARady */
            {
                ArrayList<Object> list = new58();
                push(goTo(29), list, false);
            }
            break;
            case 59: /* reduce ANum */
            {
                ArrayList<Object> list = new59();
                push(goTo(30), list, false);
            }
            break;
            case 60: /* reduce AAP */
            {
                ArrayList<Object> list = new60();
                push(goTo(31), list, false);
            }
            break;
            case 61: /* reduce ABP */
            {
                ArrayList<Object> list = new61();
                push(goTo(31), list, false);
            }
            break;
            case 62: /* reduce ACP */
            {
                ArrayList<Object> list = new62();
                push(goTo(31), list, false);
            }
            break;
            case 63: /* reduce AP3 */
            {
                ArrayList<Object> list = new63();
                push(goTo(32), list, false);
            }
            break;
            case 64: /* reduce AAP0 */
            {
                ArrayList<Object> list = new64();
                push(goTo(33), list, false);
            }
            break;
            case 65: /* reduce ABP0 */
            {
                ArrayList<Object> list = new65();
                push(goTo(33), list, false);
            }
            break;
            case 66: /* reduce AP1 */
            {
                ArrayList<Object> list = new66();
                push(goTo(34), list, false);
            }
            break;
            case 67: /* reduce AS */
            {
                ArrayList<Object> list = new67();
                push(goTo(35), list, false);
            }
            break;
            case 68: /* reduce AASp */
            {
                ArrayList<Object> list = new68();
                push(goTo(36), list, false);
            }
            break;
            case 69: /* reduce ABSp */
            {
                ArrayList<Object> list = new69();
                push(goTo(36), list, false);
            }
            break;
            case 70: /* reduce AASp0 */
            {
                ArrayList<Object> list = new70();
                push(goTo(37), list, false);
            }
            break;
            case 71: /* reduce ABSp0 */
            {
                ArrayList<Object> list = new71();
                push(goTo(37), list, false);
            }
            break;
            case 72: /* reduce ACSp0 */
            {
                ArrayList<Object> list = new72();
                push(goTo(37), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pstartNode1 = new AStart(pexpNode2);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AUnaFiguraExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PPr1 ppr1Node2;
        ppr1Node2 = (PPr1)nodeArrayList1.get(0);

        pexpNode1 = new AUnaFiguraExp(ppr1Node2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AConcatenarFiguraExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        PPr1 ppr1Node3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        ppr1Node3 = (PPr1)nodeArrayList2.get(0);

        pexpNode1 = new AConcatenarFiguraExp(pexpNode2, ppr1Node3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAPr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr1 ppr1Node1;
        {
            // Block
        TMinus tminusNode2;
        PF pfNode3;
        PS psNode4;
        PMayus0 pmayus0Node5;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pfNode3 = (PF)nodeArrayList2.get(0);
        psNode4 = (PS)nodeArrayList3.get(0);
        pmayus0Node5 = (PMayus0)nodeArrayList4.get(0);

        ppr1Node1 = new AAPr1(tminusNode2, pfNode3, psNode4, pmayus0Node5);
        }
	nodeList.add(ppr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ABPr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr1 ppr1Node1;
        {
            // Block
        TMinus tminusNode2;
        PF pfNode3;
        PMayus0 pmayus0Node4;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pfNode3 = (PF)nodeArrayList2.get(0);
        pmayus0Node4 = (PMayus0)nodeArrayList3.get(0);

        ppr1Node1 = new ABPr1(tminusNode2, pfNode3, pmayus0Node4);
        }
	nodeList.add(ppr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ACPr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr1 ppr1Node1;
        {
            // Block
        TMinus tminusNode2;
        PS psNode3;
        PF pfNode4;
        PMayus0 pmayus0Node5;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        psNode3 = (PS)nodeArrayList2.get(0);
        pfNode4 = (PF)nodeArrayList3.get(0);
        pmayus0Node5 = (PMayus0)nodeArrayList4.get(0);

        ppr1Node1 = new ACPr1(tminusNode2, psNode3, pfNode4, pmayus0Node5);
        }
	nodeList.add(ppr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAMayus0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMayus0 pmayus0Node1;
        {
            // Block
        TMayus tmayusNode2;
        tmayusNode2 = (TMayus)nodeArrayList1.get(0);

        pmayus0Node1 = new AAMayus0(tmayusNode2);
        }
	nodeList.add(pmayus0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ABMayus0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMayus0 pmayus0Node1;
        {
            // Block
        TSl tslNode2;
        TMayus tmayusNode3;
        tslNode2 = (TSl)nodeArrayList1.get(0);
        tmayusNode3 = (TMayus)nodeArrayList2.get(0);

        pmayus0Node1 = new ABMayus0(tslNode2, tmayusNode3);
        }
	nodeList.add(pmayus0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AFinFigura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFinFigura pfinfiguraNode1;
        {
            // Block
        TMinus tminusNode2;
        TSl tslNode3;
        PNombreFigura pnombrefiguraNode4;
        TMayus tmayusNode5;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        tslNode3 = (TSl)nodeArrayList2.get(0);
        pnombrefiguraNode4 = (PNombreFigura)nodeArrayList3.get(0);
        tmayusNode5 = (TMayus)nodeArrayList4.get(0);

        pfinfiguraNode1 = new AFinFigura(tminusNode2, tslNode3, pnombrefiguraNode4, tmayusNode5);
        }
	nodeList.add(pfinfiguraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AANombreFigura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNombreFigura pnombrefiguraNode1;
        {
            // Block
        TLine tlineNode2;
        tlineNode2 = (TLine)nodeArrayList1.get(0);

        pnombrefiguraNode1 = new AANombreFigura(tlineNode2);
        }
	nodeList.add(pnombrefiguraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ABNombreFigura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNombreFigura pnombrefiguraNode1;
        {
            // Block
        TCircle tcircleNode2;
        tcircleNode2 = (TCircle)nodeArrayList1.get(0);

        pnombrefiguraNode1 = new ABNombreFigura(tcircleNode2);
        }
	nodeList.add(pnombrefiguraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ACNombreFigura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNombreFigura pnombrefiguraNode1;
        {
            // Block
        TRect trectNode2;
        trectNode2 = (TRect)nodeArrayList1.get(0);

        pnombrefiguraNode1 = new ACNombreFigura(trectNode2);
        }
	nodeList.add(pnombrefiguraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ADNombreFigura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNombreFigura pnombrefiguraNode1;
        {
            // Block
        TEllipse tellipseNode2;
        tellipseNode2 = (TEllipse)nodeArrayList1.get(0);

        pnombrefiguraNode1 = new ADNombreFigura(tellipseNode2);
        }
	nodeList.add(pnombrefiguraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AENombreFigura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNombreFigura pnombrefiguraNode1;
        {
            // Block
        TPolygon tpolygonNode2;
        tpolygonNode2 = (TPolygon)nodeArrayList1.get(0);

        pnombrefiguraNode1 = new AENombreFigura(tpolygonNode2);
        }
	nodeList.add(pnombrefiguraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AFNombreFigura */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNombreFigura pnombrefiguraNode1;
        {
            // Block
        TPolyline tpolylineNode2;
        tpolylineNode2 = (TPolyline)nodeArrayList1.get(0);

        pnombrefiguraNode1 = new AFNombreFigura(tpolylineNode2);
        }
	nodeList.add(pnombrefiguraNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TLine tlineNode2;
        PL1 pl1Node3;
        tlineNode2 = (TLine)nodeArrayList1.get(0);
        pl1Node3 = (PL1)nodeArrayList2.get(0);

        pfNode1 = new AAF(tlineNode2, pl1Node3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ABF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TCircle tcircleNode2;
        PC1 pc1Node3;
        tcircleNode2 = (TCircle)nodeArrayList1.get(0);
        pc1Node3 = (PC1)nodeArrayList2.get(0);

        pfNode1 = new ABF(tcircleNode2, pc1Node3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ACF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TRect trectNode2;
        PR1 pr1Node3;
        trectNode2 = (TRect)nodeArrayList1.get(0);
        pr1Node3 = (PR1)nodeArrayList2.get(0);

        pfNode1 = new ACF(trectNode2, pr1Node3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ADF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TEllipse tellipseNode2;
        PE1 pe1Node3;
        tellipseNode2 = (TEllipse)nodeArrayList1.get(0);
        pe1Node3 = (PE1)nodeArrayList2.get(0);

        pfNode1 = new ADF(tellipseNode2, pe1Node3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AEF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TPolygon tpolygonNode2;
        PP ppNode3;
        tpolygonNode2 = (TPolygon)nodeArrayList1.get(0);
        ppNode3 = (PP)nodeArrayList2.get(0);

        pfNode1 = new AEF(tpolygonNode2, ppNode3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AFF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TPolyline tpolylineNode2;
        PP ppNode3;
        tpolylineNode2 = (TPolyline)nodeArrayList1.get(0);
        ppNode3 = (PP)nodeArrayList2.get(0);

        pfNode1 = new AFF(tpolylineNode2, ppNode3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAAtt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt pattNode1;
        {
            // Block
        PAtt0 patt0Node2;
        patt0Node2 = (PAtt0)nodeArrayList1.get(0);

        pattNode1 = new AAAtt(patt0Node2);
        }
	nodeList.add(pattNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ABAtt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt pattNode1;
        {
            // Block
        PAtt pattNode2;
        PAtt0 patt0Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        patt0Node3 = (PAtt0)nodeArrayList2.get(0);

        pattNode1 = new ABAtt(pattNode2, patt0Node3);
        }
	nodeList.add(pattNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAAtt0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt0 patt0Node1;
        {
            // Block
        TFill tfillNode2;
        TIg tigNode3;
        TCo tcoNode4;
        TC0 tc0Node5;
        TCo tcoNode6;
        tfillNode2 = (TFill)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        tc0Node5 = (TC0)nodeArrayList4.get(0);
        tcoNode6 = (TCo)nodeArrayList5.get(0);

        patt0Node1 = new AAAtt0(tfillNode2, tigNode3, tcoNode4, tc0Node5, tcoNode6);
        }
	nodeList.add(patt0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ABAtt0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt0 patt0Node1;
        {
            // Block
        TStroke tstrokeNode2;
        TIg tigNode3;
        TCo tcoNode4;
        TC0 tc0Node5;
        TCo tcoNode6;
        tstrokeNode2 = (TStroke)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        tc0Node5 = (TC0)nodeArrayList4.get(0);
        tcoNode6 = (TCo)nodeArrayList5.get(0);

        patt0Node1 = new ABAtt0(tstrokeNode2, tigNode3, tcoNode4, tc0Node5, tcoNode6);
        }
	nodeList.add(patt0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ACAtt0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt0 patt0Node1;
        {
            // Block
        TStrokew tstrokewNode2;
        TIg tigNode3;
        PNum pnumNode4;
        tstrokewNode2 = (TStrokew)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        patt0Node1 = new ACAtt0(tstrokewNode2, tigNode3, pnumNode4);
        }
	nodeList.add(patt0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAL1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL1 pl1Node1;
        {
            // Block
        PAtt pattNode2;
        PL0 pl0Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pl0Node3 = (PL0)nodeArrayList2.get(0);

        pl1Node1 = new AAL1(pattNode2, pl0Node3);
        }
	nodeList.add(pl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ABL1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL1 pl1Node1;
        {
            // Block
        PL0 pl0Node2;
        PAtt pattNode3;
        pl0Node2 = (PL0)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        pl1Node1 = new ABL1(pl0Node2, pattNode3);
        }
	nodeList.add(pl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACL1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL1 pl1Node1;
        {
            // Block
        PAtt pattNode2;
        PL0 pl0Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pl0Node3 = (PL0)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        pl1Node1 = new ACL1(pattNode2, pl0Node3, pattNode4);
        }
	nodeList.add(pl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ADL1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL1 pl1Node1;
        {
            // Block
        PL0 pl0Node2;
        pl0Node2 = (PL0)nodeArrayList1.get(0);

        pl1Node1 = new ADL1(pl0Node2);
        }
	nodeList.add(pl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AL0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL0 pl0Node1;
        {
            // Block
        PCoorx pcoorxNode2;
        PCoory pcooryNode3;
        PCoorx2 pcoorx2Node4;
        PCoory2 pcoory2Node5;
        pcoorxNode2 = (PCoorx)nodeArrayList1.get(0);
        pcooryNode3 = (PCoory)nodeArrayList2.get(0);
        pcoorx2Node4 = (PCoorx2)nodeArrayList3.get(0);
        pcoory2Node5 = (PCoory2)nodeArrayList4.get(0);

        pl0Node1 = new AL0(pcoorxNode2, pcooryNode3, pcoorx2Node4, pcoory2Node5);
        }
	nodeList.add(pl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAC1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC1 pc1Node1;
        {
            // Block
        PAtt pattNode2;
        PC2 pc2Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pc2Node3 = (PC2)nodeArrayList2.get(0);

        pc1Node1 = new AAC1(pattNode2, pc2Node3);
        }
	nodeList.add(pc1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ABC1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC1 pc1Node1;
        {
            // Block
        PC2 pc2Node2;
        PAtt pattNode3;
        pc2Node2 = (PC2)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        pc1Node1 = new ABC1(pc2Node2, pattNode3);
        }
	nodeList.add(pc1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ACC1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC1 pc1Node1;
        {
            // Block
        PAtt pattNode2;
        PC2 pc2Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pc2Node3 = (PC2)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        pc1Node1 = new ACC1(pattNode2, pc2Node3, pattNode4);
        }
	nodeList.add(pc1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ADC1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC1 pc1Node1;
        {
            // Block
        PC2 pc2Node2;
        pc2Node2 = (PC2)nodeArrayList1.get(0);

        pc1Node1 = new ADC1(pc2Node2);
        }
	nodeList.add(pc1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AC2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC2 pc2Node1;
        {
            // Block
        PCoorcx pcoorcxNode2;
        PCoorcy pcoorcyNode3;
        PRad pradNode4;
        pcoorcxNode2 = (PCoorcx)nodeArrayList1.get(0);
        pcoorcyNode3 = (PCoorcy)nodeArrayList2.get(0);
        pradNode4 = (PRad)nodeArrayList3.get(0);

        pc2Node1 = new AC2(pcoorcxNode2, pcoorcyNode3, pradNode4);
        }
	nodeList.add(pc2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAR1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR1 pr1Node1;
        {
            // Block
        PAtt pattNode2;
        PR2 pr2Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pr2Node3 = (PR2)nodeArrayList2.get(0);

        pr1Node1 = new AAR1(pattNode2, pr2Node3);
        }
	nodeList.add(pr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ABR1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR1 pr1Node1;
        {
            // Block
        PR2 pr2Node2;
        PAtt pattNode3;
        pr2Node2 = (PR2)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        pr1Node1 = new ABR1(pr2Node2, pattNode3);
        }
	nodeList.add(pr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ACR1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR1 pr1Node1;
        {
            // Block
        PAtt pattNode2;
        PR2 pr2Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pr2Node3 = (PR2)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        pr1Node1 = new ACR1(pattNode2, pr2Node3, pattNode4);
        }
	nodeList.add(pr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ADR1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR1 pr1Node1;
        {
            // Block
        PR2 pr2Node2;
        pr2Node2 = (PR2)nodeArrayList1.get(0);

        pr1Node1 = new ADR1(pr2Node2);
        }
	nodeList.add(pr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AR2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR2 pr2Node1;
        {
            // Block
        PCoory0 pcoory0Node2;
        PWid pwidNode3;
        PHei pheiNode4;
        pcoory0Node2 = (PCoory0)nodeArrayList1.get(0);
        pwidNode3 = (PWid)nodeArrayList2.get(0);
        pheiNode4 = (PHei)nodeArrayList3.get(0);

        pr2Node1 = new AR2(pcoory0Node2, pwidNode3, pheiNode4);
        }
	nodeList.add(pr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PAtt pattNode2;
        PE0 pe0Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pe0Node3 = (PE0)nodeArrayList2.get(0);

        pe1Node1 = new AAE1(pattNode2, pe0Node3);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ABE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PE0 pe0Node2;
        PAtt pattNode3;
        pe0Node2 = (PE0)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        pe1Node1 = new ABE1(pe0Node2, pattNode3);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ACE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PAtt pattNode2;
        PE0 pe0Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pe0Node3 = (PE0)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        pe1Node1 = new ACE1(pattNode2, pe0Node3, pattNode4);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ADE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PE0 pe0Node2;
        pe0Node2 = (PE0)nodeArrayList1.get(0);

        pe1Node1 = new ADE1(pe0Node2);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AE0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE0 pe0Node1;
        {
            // Block
        PCoorcx pcoorcxNode2;
        PCoorcy pcoorcyNode3;
        PRadx pradxNode4;
        PRady pradyNode5;
        pcoorcxNode2 = (PCoorcx)nodeArrayList1.get(0);
        pcoorcyNode3 = (PCoorcy)nodeArrayList2.get(0);
        pradxNode4 = (PRadx)nodeArrayList3.get(0);
        pradyNode5 = (PRady)nodeArrayList4.get(0);

        pe0Node1 = new AE0(pcoorcxNode2, pcoorcyNode3, pradxNode4, pradyNode5);
        }
	nodeList.add(pe0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ACoorx */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCoorx pcoorxNode1;
        {
            // Block
        TX1 tx1Node2;
        TIg tigNode3;
        PNum pnumNode4;
        tx1Node2 = (TX1)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pcoorxNode1 = new ACoorx(tx1Node2, tigNode3, pnumNode4);
        }
	nodeList.add(pcoorxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ACoory */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCoory pcooryNode1;
        {
            // Block
        TY1 ty1Node2;
        TIg tigNode3;
        PNum pnumNode4;
        ty1Node2 = (TY1)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pcooryNode1 = new ACoory(ty1Node2, tigNode3, pnumNode4);
        }
	nodeList.add(pcooryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ACoorx2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCoorx2 pcoorx2Node1;
        {
            // Block
        TX2 tx2Node2;
        TIg tigNode3;
        PNum pnumNode4;
        tx2Node2 = (TX2)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pcoorx2Node1 = new ACoorx2(tx2Node2, tigNode3, pnumNode4);
        }
	nodeList.add(pcoorx2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ACoory2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCoory2 pcoory2Node1;
        {
            // Block
        TY2 ty2Node2;
        TIg tigNode3;
        PNum pnumNode4;
        ty2Node2 = (TY2)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pcoory2Node1 = new ACoory2(ty2Node2, tigNode3, pnumNode4);
        }
	nodeList.add(pcoory2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ACoorcx */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCoorcx pcoorcxNode1;
        {
            // Block
        TCx tcxNode2;
        TIg tigNode3;
        PNum pnumNode4;
        tcxNode2 = (TCx)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pcoorcxNode1 = new ACoorcx(tcxNode2, tigNode3, pnumNode4);
        }
	nodeList.add(pcoorcxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ACoorcy */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCoorcy pcoorcyNode1;
        {
            // Block
        TCy tcyNode2;
        TIg tigNode3;
        PNum pnumNode4;
        tcyNode2 = (TCy)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pcoorcyNode1 = new ACoorcy(tcyNode2, tigNode3, pnumNode4);
        }
	nodeList.add(pcoorcyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ARad */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRad pradNode1;
        {
            // Block
        TR0 tr0Node2;
        TIg tigNode3;
        PNum pnumNode4;
        tr0Node2 = (TR0)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pradNode1 = new ARad(tr0Node2, tigNode3, pnumNode4);
        }
	nodeList.add(pradNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ACoorx0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCoorx0 pcoorx0Node1;
        {
            // Block
        TX0 tx0Node2;
        TIg tigNode3;
        PNum pnumNode4;
        tx0Node2 = (TX0)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pcoorx0Node1 = new ACoorx0(tx0Node2, tigNode3, pnumNode4);
        }
	nodeList.add(pcoorx0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ACoory0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCoory0 pcoory0Node1;
        {
            // Block
        TY0 ty0Node2;
        TIg tigNode3;
        PNum pnumNode4;
        ty0Node2 = (TY0)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pcoory0Node1 = new ACoory0(ty0Node2, tigNode3, pnumNode4);
        }
	nodeList.add(pcoory0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AWid */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWid pwidNode1;
        {
            // Block
        TWidth twidthNode2;
        TIg tigNode3;
        PNum pnumNode4;
        twidthNode2 = (TWidth)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pwidNode1 = new AWid(twidthNode2, tigNode3, pnumNode4);
        }
	nodeList.add(pwidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AHei */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHei pheiNode1;
        {
            // Block
        THeight theightNode2;
        TIg tigNode3;
        PNum pnumNode4;
        theightNode2 = (THeight)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pheiNode1 = new AHei(theightNode2, tigNode3, pnumNode4);
        }
	nodeList.add(pheiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ARadx */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRadx pradxNode1;
        {
            // Block
        TRx trxNode2;
        TIg tigNode3;
        PNum pnumNode4;
        trxNode2 = (TRx)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pradxNode1 = new ARadx(trxNode2, tigNode3, pnumNode4);
        }
	nodeList.add(pradxNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ARady */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRady pradyNode1;
        {
            // Block
        TRy tryNode2;
        TIg tigNode3;
        PNum pnumNode4;
        tryNode2 = (TRy)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        pradyNode1 = new ARady(tryNode2, tigNode3, pnumNode4);
        }
	nodeList.add(pradyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ANum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNum pnumNode1;
        {
            // Block
        TCo tcoNode2;
        TN tnNode3;
        TCo tcoNode4;
        TCo tcoNode5;
        tcoNode2 = (TCo)nodeArrayList1.get(0);
        tnNode3 = (TN)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        tcoNode5 = (TCo)nodeArrayList4.get(0);

        pnumNode1 = new ANum(tcoNode2, tnNode3, tcoNode4, tcoNode5);
        }
	nodeList.add(pnumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PAtt pattNode2;
        PP3 pp3Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pp3Node3 = (PP3)nodeArrayList2.get(0);

        ppNode1 = new AAP(pattNode2, pp3Node3);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ABP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PP3 pp3Node2;
        PAtt pattNode3;
        pp3Node2 = (PP3)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        ppNode1 = new ABP(pp3Node2, pattNode3);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ACP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PAtt pattNode2;
        PP3 pp3Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pp3Node3 = (PP3)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        ppNode1 = new ACP(pattNode2, pp3Node3, pattNode4);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AP3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP3 pp3Node1;
        {
            // Block
        TPoints tpointsNode2;
        TIg tigNode3;
        TCo tcoNode4;
        PP0 pp0Node5;
        TCo tcoNode6;
        tpointsNode2 = (TPoints)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        pp0Node5 = (PP0)nodeArrayList4.get(0);
        tcoNode6 = (TCo)nodeArrayList5.get(0);

        pp3Node1 = new AP3(tpointsNode2, tigNode3, tcoNode4, pp0Node5, tcoNode6);
        }
	nodeList.add(pp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AAP0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP0 pp0Node1;
        {
            // Block
        PP1 pp1Node2;
        pp1Node2 = (PP1)nodeArrayList1.get(0);

        pp0Node1 = new AAP0(pp1Node2);
        }
	nodeList.add(pp0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ABP0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP0 pp0Node1;
        {
            // Block
        PP0 pp0Node2;
        PP1 pp1Node3;
        pp0Node2 = (PP0)nodeArrayList1.get(0);
        pp1Node3 = (PP1)nodeArrayList2.get(0);

        pp0Node1 = new ABP0(pp0Node2, pp1Node3);
        }
	nodeList.add(pp0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AP1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP1 pp1Node1;
        {
            // Block
        TN tnNode2;
        TComa tcomaNode3;
        TN tnNode4;
        tnNode2 = (TN)nodeArrayList1.get(0);
        tcomaNode3 = (TComa)nodeArrayList2.get(0);
        tnNode4 = (TN)nodeArrayList3.get(0);

        pp1Node1 = new AP1(tnNode2, tcomaNode3, tnNode4);
        }
	nodeList.add(pp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AS */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        {
            // Block
        TStyle tstyleNode2;
        TIg tigNode3;
        TCo tcoNode4;
        PSp pspNode5;
        TCo tcoNode6;
        tstyleNode2 = (TStyle)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        pspNode5 = (PSp)nodeArrayList4.get(0);
        tcoNode6 = (TCo)nodeArrayList5.get(0);

        psNode1 = new AS(tstyleNode2, tigNode3, tcoNode4, pspNode5, tcoNode6);
        }
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AASp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp pspNode1;
        {
            // Block
        PSp0 psp0Node2;
        psp0Node2 = (PSp0)nodeArrayList1.get(0);

        pspNode1 = new AASp(psp0Node2);
        }
	nodeList.add(pspNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ABSp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp pspNode1;
        {
            // Block
        PSp pspNode2;
        TPc tpcNode3;
        PSp0 psp0Node4;
        pspNode2 = (PSp)nodeArrayList1.get(0);
        tpcNode3 = (TPc)nodeArrayList2.get(0);
        psp0Node4 = (PSp0)nodeArrayList3.get(0);

        pspNode1 = new ABSp(pspNode2, tpcNode3, psp0Node4);
        }
	nodeList.add(pspNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AASp0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp0 psp0Node1;
        {
            // Block
        TFill tfillNode2;
        TDosp tdospNode3;
        TC0 tc0Node4;
        tfillNode2 = (TFill)nodeArrayList1.get(0);
        tdospNode3 = (TDosp)nodeArrayList2.get(0);
        tc0Node4 = (TC0)nodeArrayList3.get(0);

        psp0Node1 = new AASp0(tfillNode2, tdospNode3, tc0Node4);
        }
	nodeList.add(psp0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ABSp0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp0 psp0Node1;
        {
            // Block
        TStroke tstrokeNode2;
        TDosp tdospNode3;
        TC0 tc0Node4;
        tstrokeNode2 = (TStroke)nodeArrayList1.get(0);
        tdospNode3 = (TDosp)nodeArrayList2.get(0);
        tc0Node4 = (TC0)nodeArrayList3.get(0);

        psp0Node1 = new ABSp0(tstrokeNode2, tdospNode3, tc0Node4);
        }
	nodeList.add(psp0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ACSp0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp0 psp0Node1;
        {
            // Block
        TStrokew tstrokewNode2;
        TDosp tdospNode3;
        TN tnNode4;
        tstrokewNode2 = (TStrokew)nodeArrayList1.get(0);
        tdospNode3 = (TDosp)nodeArrayList2.get(0);
        tnNode4 = (TN)nodeArrayList3.get(0);

        psp0Node1 = new ACSp0(tstrokewNode2, tdospNode3, tnNode4);
        }
	nodeList.add(psp0Node1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, },
			{{-1, ERROR, 1}, {6, SHIFT, 5}, {7, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 8}, {10, SHIFT, 9}, {11, SHIFT, 10}, {27, SHIFT, 11}, },
			{{-1, ERROR, 2}, {34, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {1, SHIFT, 1}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 5}, {12, SHIFT, 15}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 6}, {16, SHIFT, 24}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 7}, {20, SHIFT, 29}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 8}, {16, SHIFT, 24}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 9}, {25, SHIFT, 38}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 10}, {25, SHIFT, 38}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 11}, {4, SHIFT, 43}, },
			{{-1, ERROR, 12}, {2, SHIFT, 44}, {5, SHIFT, 45}, {27, SHIFT, 11}, },
			{{-1, ERROR, 13}, {6, SHIFT, 5}, {7, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 8}, {10, SHIFT, 9}, {11, SHIFT, 10}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 15}, {4, SHIFT, 49}, },
			{{-1, ERROR, 16}, {4, SHIFT, 50}, },
			{{-1, ERROR, 17}, {4, SHIFT, 51}, },
			{{-1, ERROR, 18}, {4, SHIFT, 52}, },
			{{-1, ERROR, 19}, {12, SHIFT, 15}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 29}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 23}, {13, SHIFT, 56}, },
			{{-1, ERROR, 24}, {4, SHIFT, 58}, },
			{{-1, ERROR, 25}, {16, SHIFT, 24}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 34}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 28}, {17, SHIFT, 61}, },
			{{-1, ERROR, 29}, {4, SHIFT, 63}, },
			{{-1, ERROR, 30}, {20, SHIFT, 29}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 39}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 33}, {21, SHIFT, 66}, },
			{{-1, ERROR, 34}, {16, SHIFT, 24}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 44}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 37}, {17, SHIFT, 61}, },
			{{-1, ERROR, 38}, {4, SHIFT, 71}, },
			{{-1, ERROR, 39}, {25, SHIFT, 38}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 41}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 43}, {3, SHIFT, 74}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 45}, {2, SHIFT, 75}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 47}, {2, SHIFT, 44}, {5, SHIFT, 45}, },
			{{-1, ERROR, 48}, {2, SHIFT, 44}, {5, SHIFT, 45}, },
			{{-1, ERROR, 49}, {3, SHIFT, 78}, },
			{{-1, ERROR, 50}, {3, SHIFT, 80}, },
			{{-1, ERROR, 51}, {3, SHIFT, 81}, },
			{{-1, ERROR, 52}, {3, SHIFT, 78}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 26}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, REDUCE, 27}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 56}, {4, SHIFT, 84}, },
			{{-1, ERROR, 57}, {14, SHIFT, 85}, },
			{{-1, ERROR, 58}, {3, SHIFT, 78}, },
			{{-1, REDUCE, 31}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, REDUCE, 32}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 61}, {4, SHIFT, 89}, },
			{{-1, ERROR, 62}, {18, SHIFT, 90}, },
			{{-1, ERROR, 63}, {3, SHIFT, 78}, },
			{{-1, REDUCE, 36}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, REDUCE, 37}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 66}, {4, SHIFT, 94}, },
			{{-1, ERROR, 67}, {22, SHIFT, 95}, },
			{{-1, REDUCE, 41}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, REDUCE, 42}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 70}, {23, SHIFT, 98}, },
			{{-1, ERROR, 71}, {3, SHIFT, 100}, },
			{{-1, REDUCE, 60}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, REDUCE, 61}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 74}, {28, SHIFT, 102}, {29, SHIFT, 103}, {30, SHIFT, 104}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 78}, {0, SHIFT, 107}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 80}, {31, SHIFT, 108}, },
			{{-1, ERROR, 81}, {31, SHIFT, 109}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 28}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 84}, {3, SHIFT, 78}, },
			{{-1, ERROR, 85}, {4, SHIFT, 111}, },
			{{-1, ERROR, 86}, {15, SHIFT, 112}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 33}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 89}, {3, SHIFT, 78}, },
			{{-1, ERROR, 90}, {4, SHIFT, 115}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 38}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 94}, {3, SHIFT, 78}, },
			{{-1, ERROR, 95}, {4, SHIFT, 117}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 43}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 98}, {4, SHIFT, 118}, },
			{{-1, ERROR, 99}, {24, SHIFT, 119}, },
			{{-1, ERROR, 100}, {0, SHIFT, 121}, },
			{{-1, REDUCE, 62}, {28, SHIFT, 16}, {29, SHIFT, 17}, {30, SHIFT, 18}, },
			{{-1, ERROR, 102}, {33, SHIFT, 124}, },
			{{-1, ERROR, 103}, {33, SHIFT, 125}, },
			{{-1, ERROR, 104}, {33, SHIFT, 126}, },
			{{-1, ERROR, 105}, {3, SHIFT, 127}, {32, SHIFT, 128}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 107}, {3, SHIFT, 129}, },
			{{-1, ERROR, 108}, {3, SHIFT, 130}, },
			{{-1, ERROR, 109}, {3, SHIFT, 131}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 111}, {3, SHIFT, 78}, },
			{{-1, ERROR, 112}, {4, SHIFT, 133}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 115}, {3, SHIFT, 78}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 117}, {3, SHIFT, 78}, },
			{{-1, ERROR, 118}, {3, SHIFT, 78}, },
			{{-1, ERROR, 119}, {4, SHIFT, 137}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 121}, {26, SHIFT, 138}, },
			{{-1, ERROR, 122}, {0, SHIFT, 121}, {3, SHIFT, 139}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 124}, {31, SHIFT, 141}, },
			{{-1, ERROR, 125}, {31, SHIFT, 142}, },
			{{-1, ERROR, 126}, {0, SHIFT, 143}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 128}, {28, SHIFT, 102}, {29, SHIFT, 103}, {30, SHIFT, 104}, },
			{{-1, ERROR, 129}, {3, SHIFT, 145}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 133}, {3, SHIFT, 78}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 137}, {3, SHIFT, 78}, },
			{{-1, ERROR, 138}, {0, SHIFT, 148}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 66}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 4}, {3, 14}, },
			{{-1, 46}, {47, 76}, {48, 77}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 12}, {13, 48}, },
			{{-1, 39}, {5, 19}, {6, 25}, {7, 30}, {8, 34}, {22, 55}, {27, 60}, {32, 65}, {36, 69}, {41, 73}, {54, 83}, {59, 88}, {64, 93}, {68, 97}, {72, 101}, },
			{{-1, 20}, {19, 53}, {25, 53}, {30, 53}, {34, 53}, {39, 53}, {55, 53}, {60, 53}, {65, 53}, {69, 53}, {73, 53}, {83, 53}, {88, 53}, {93, 53}, {97, 53}, {101, 53}, },
			{{-1, 21}, },
			{{-1, 22}, {19, 54}, },
			{{-1, 26}, },
			{{-1, 27}, {25, 59}, },
			{{-1, 31}, },
			{{-1, 32}, {30, 64}, },
			{{-1, 35}, },
			{{-1, 36}, {34, 68}, },
			{{-1, 23}, },
			{{-1, 57}, },
			{{-1, 86}, },
			{{-1, 113}, },
			{{-1, 28}, {8, 37}, {34, 37}, },
			{{-1, 62}, {37, 70}, },
			{{-1, 91}, },
			{{-1, -1}, },
			{{-1, 33}, },
			{{-1, 67}, },
			{{-1, 96}, },
			{{-1, 99}, },
			{{-1, 120}, },
			{{-1, 79}, {52, 82}, {58, 87}, {63, 92}, {84, 110}, {89, 114}, {94, 116}, {111, 132}, {115, 134}, {117, 135}, {118, 136}, {133, 146}, {137, 147}, },
			{{-1, 40}, {10, 42}, },
			{{-1, 41}, {39, 72}, },
			{{-1, 122}, },
			{{-1, 123}, {122, 140}, },
			{{-1, 13}, {12, 47}, },
			{{-1, 105}, },
			{{-1, 106}, {128, 144}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '<'",
			"expecting: 'line', 'circle', 'rect', 'ellipse', 'polygon', 'polyline', 'style'",
			"expecting: EOF",
			"expecting: '<', EOF",
			"expecting: 'x1', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'cx', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'y', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'points', 'fill', 'stroke', 'stroke-width'",
			"expecting: '='",
			"expecting: '>', '/', 'style'",
			"expecting: 'line', 'circle', 'rect', 'ellipse', 'polygon', 'polyline'",
			"expecting: '>', '/', 'x1', 'cx', 'y', 'points', 'style', 'fill', 'stroke', 'stroke-width'",
			"expecting: '>', '/', 'style', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'y1'",
			"expecting: 'cy'",
			"expecting: 'width'",
			"expecting: 'fill', 'stroke', 'stroke-width'",
			"expecting: '"'",
			"expecting: '>'",
			"expecting: '>', '/'",
			"expecting: 'x2'",
			"expecting: 'r'",
			"expecting: 'height'",
			"expecting: 'rx'",
			"expecting: n",
			"expecting: c0",
			"expecting: 'y2'",
			"expecting: 'ry'",
			"expecting: ':'",
			"expecting: '"', ';'",
			"expecting: 'r', 'rx'",
			"expecting: ','",
			"expecting: n, '"'",
			"expecting: '>', '/', 'line', 'circle', 'rect', 'ellipse', 'polygon', 'polyline'",
			"expecting: '>', '/', 'x1', 'y1', 'x2', 'y2', 'cx', 'cy', 'r', 'y', 'width', 'height', 'rx', 'ry', 'points', 'style', 'fill', 'stroke', 'stroke-width'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 5, 6, 5, 7, 7, 8, 9, 10, 3, 8, 8, 8, 8, 4, 11, 9, 12, 13, 8, 5, 9, 12, 14, 8, 6, 9, 12, 15, 5, 9, 12, 14, 8, 7, 9, 16, 9, 17, 3, 18, 3, 19, 19, 17, 17, 17, 17, 11, 12, 12, 8, 20, 17, 12, 12, 8, 21, 17, 12, 12, 8, 22, 12, 12, 23, 17, 12, 12, 16, 3, 3, 3, 24, 13, 25, 25, 11, 12, 17, 8, 26, 14, 12, 17, 8, 12, 15, 12, 17, 8, 12, 12, 8, 27, 24, 12, 28, 28, 28, 29, 29, 17, 17, 17, 20, 17, 8, 12, 30, 17, 22, 17, 17, 8, 12, 31, 32, 32, 25, 25, 24, 33, 16, 17, 11, 11, 26, 17, 12, 12, 27, 17, 24, 12, 32, 29, 29, 29, 29, 34, 12, 12, 32, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

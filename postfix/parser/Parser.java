/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.parser;

import postfix.lexer.*;
import postfix.node.*;
import postfix.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AStart */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAPr */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce ABPr */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAPr1 */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ABPr1 */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ACPr1 */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAF */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ABF */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce ACF */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce ADF */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AEF */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list, false);
            }
            break;
            case 11: /* reduce AFF */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list, false);
            }
            break;
            case 12: /* reduce AAAtt */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list, false);
            }
            break;
            case 13: /* reduce ABAtt */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list, false);
            }
            break;
            case 14: /* reduce AAAtt0 */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce ABAtt0 */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list, false);
            }
            break;
            case 16: /* reduce ACAtt0 */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list, false);
            }
            break;
            case 17: /* reduce AAL1 */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce ABL1 */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce ACL1 */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list, false);
            }
            break;
            case 20: /* reduce AL0 */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list, false);
            }
            break;
            case 21: /* reduce AAC1 */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce ABC1 */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce ACC1 */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list, false);
            }
            break;
            case 24: /* reduce AC2 */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list, false);
            }
            break;
            case 25: /* reduce AAR1 */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list, false);
            }
            break;
            case 26: /* reduce ABR1 */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list, false);
            }
            break;
            case 27: /* reduce ACR1 */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list, false);
            }
            break;
            case 28: /* reduce AR2 */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list, false);
            }
            break;
            case 29: /* reduce AAE1 */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list, false);
            }
            break;
            case 30: /* reduce ABE1 */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list, false);
            }
            break;
            case 31: /* reduce ACE1 */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list, false);
            }
            break;
            case 32: /* reduce AE0 */
            {
                ArrayList<Object> list = new32();
                push(goTo(13), list, false);
            }
            break;
            case 33: /* reduce ANum */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce AAP */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce ABP */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce ACP */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce AP3 */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list, false);
            }
            break;
            case 38: /* reduce AAP0 */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list, false);
            }
            break;
            case 39: /* reduce ABP0 */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list, false);
            }
            break;
            case 40: /* reduce AP1 */
            {
                ArrayList<Object> list = new40();
                push(goTo(18), list, false);
            }
            break;
            case 41: /* reduce AS */
            {
                ArrayList<Object> list = new41();
                push(goTo(19), list, false);
            }
            break;
            case 42: /* reduce AASp */
            {
                ArrayList<Object> list = new42();
                push(goTo(20), list, false);
            }
            break;
            case 43: /* reduce ABSp */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list, false);
            }
            break;
            case 44: /* reduce AASp0 */
            {
                ArrayList<Object> list = new44();
                push(goTo(21), list, false);
            }
            break;
            case 45: /* reduce ABSp0 */
            {
                ArrayList<Object> list = new45();
                push(goTo(21), list, false);
            }
            break;
            case 46: /* reduce ACSp0 */
            {
                ArrayList<Object> list = new46();
                push(goTo(21), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TSvg1 tsvg1Node2;
        PPr pprNode3;
        TSvg2 tsvg2Node4;
        tsvg1Node2 = (TSvg1)nodeArrayList1.get(0);
        pprNode3 = (PPr)nodeArrayList2.get(0);
        tsvg2Node4 = (TSvg2)nodeArrayList3.get(0);

        pstartNode1 = new AStart(tsvg1Node2, pprNode3, tsvg2Node4);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAPr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr pprNode1;
        {
            // Block
        PPr1 ppr1Node2;
        ppr1Node2 = (PPr1)nodeArrayList1.get(0);

        pprNode1 = new AAPr(ppr1Node2);
        }
	nodeList.add(pprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ABPr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr pprNode1;
        {
            // Block
        PPr pprNode2;
        PPr1 ppr1Node3;
        pprNode2 = (PPr)nodeArrayList1.get(0);
        ppr1Node3 = (PPr1)nodeArrayList2.get(0);

        pprNode1 = new ABPr(pprNode2, ppr1Node3);
        }
	nodeList.add(pprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAPr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr1 ppr1Node1;
        {
            // Block
        TMinus tminusNode2;
        PF pfNode3;
        PS psNode4;
        TMayus tmayusNode5;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pfNode3 = (PF)nodeArrayList2.get(0);
        psNode4 = (PS)nodeArrayList3.get(0);
        tmayusNode5 = (TMayus)nodeArrayList4.get(0);

        ppr1Node1 = new AAPr1(tminusNode2, pfNode3, psNode4, tmayusNode5);
        }
	nodeList.add(ppr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ABPr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr1 ppr1Node1;
        {
            // Block
        TMinus tminusNode2;
        PF pfNode3;
        TMayus tmayusNode4;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pfNode3 = (PF)nodeArrayList2.get(0);
        tmayusNode4 = (TMayus)nodeArrayList3.get(0);

        ppr1Node1 = new ABPr1(tminusNode2, pfNode3, tmayusNode4);
        }
	nodeList.add(ppr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ACPr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr1 ppr1Node1;
        {
            // Block
        TMinus tminusNode2;
        PS psNode3;
        PF pfNode4;
        TMayus tmayusNode5;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        psNode3 = (PS)nodeArrayList2.get(0);
        pfNode4 = (PF)nodeArrayList3.get(0);
        tmayusNode5 = (TMayus)nodeArrayList4.get(0);

        ppr1Node1 = new ACPr1(tminusNode2, psNode3, pfNode4, tmayusNode5);
        }
	nodeList.add(ppr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TLine tlineNode2;
        PL1 pl1Node3;
        tlineNode2 = (TLine)nodeArrayList1.get(0);
        pl1Node3 = (PL1)nodeArrayList2.get(0);

        pfNode1 = new AAF(tlineNode2, pl1Node3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ABF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TCircle tcircleNode2;
        PC1 pc1Node3;
        tcircleNode2 = (TCircle)nodeArrayList1.get(0);
        pc1Node3 = (PC1)nodeArrayList2.get(0);

        pfNode1 = new ABF(tcircleNode2, pc1Node3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ACF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TRect trectNode2;
        PR1 pr1Node3;
        trectNode2 = (TRect)nodeArrayList1.get(0);
        pr1Node3 = (PR1)nodeArrayList2.get(0);

        pfNode1 = new ACF(trectNode2, pr1Node3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ADF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TEllipse tellipseNode2;
        PE1 pe1Node3;
        tellipseNode2 = (TEllipse)nodeArrayList1.get(0);
        pe1Node3 = (PE1)nodeArrayList2.get(0);

        pfNode1 = new ADF(tellipseNode2, pe1Node3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AEF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TPolygon tpolygonNode2;
        PP ppNode3;
        tpolygonNode2 = (TPolygon)nodeArrayList1.get(0);
        ppNode3 = (PP)nodeArrayList2.get(0);

        pfNode1 = new AEF(tpolygonNode2, ppNode3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AFF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TPolyline tpolylineNode2;
        PP ppNode3;
        tpolylineNode2 = (TPolyline)nodeArrayList1.get(0);
        ppNode3 = (PP)nodeArrayList2.get(0);

        pfNode1 = new AFF(tpolylineNode2, ppNode3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAAtt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt pattNode1;
        {
            // Block
        PAtt0 patt0Node2;
        patt0Node2 = (PAtt0)nodeArrayList1.get(0);

        pattNode1 = new AAAtt(patt0Node2);
        }
	nodeList.add(pattNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ABAtt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt pattNode1;
        {
            // Block
        PAtt pattNode2;
        PAtt0 patt0Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        patt0Node3 = (PAtt0)nodeArrayList2.get(0);

        pattNode1 = new ABAtt(pattNode2, patt0Node3);
        }
	nodeList.add(pattNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAAtt0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt0 patt0Node1;
        {
            // Block
        TFill tfillNode2;
        TIg tigNode3;
        TCo tcoNode4;
        TC0 tc0Node5;
        TCo tcoNode6;
        tfillNode2 = (TFill)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        tc0Node5 = (TC0)nodeArrayList4.get(0);
        tcoNode6 = (TCo)nodeArrayList5.get(0);

        patt0Node1 = new AAAtt0(tfillNode2, tigNode3, tcoNode4, tc0Node5, tcoNode6);
        }
	nodeList.add(patt0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ABAtt0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt0 patt0Node1;
        {
            // Block
        TStroke tstrokeNode2;
        TIg tigNode3;
        TCo tcoNode4;
        TC0 tc0Node5;
        TCo tcoNode6;
        tstrokeNode2 = (TStroke)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        tc0Node5 = (TC0)nodeArrayList4.get(0);
        tcoNode6 = (TCo)nodeArrayList5.get(0);

        patt0Node1 = new ABAtt0(tstrokeNode2, tigNode3, tcoNode4, tc0Node5, tcoNode6);
        }
	nodeList.add(patt0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ACAtt0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt0 patt0Node1;
        {
            // Block
        TStrokew tstrokewNode2;
        TIg tigNode3;
        PNum pnumNode4;
        tstrokewNode2 = (TStrokew)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        patt0Node1 = new ACAtt0(tstrokewNode2, tigNode3, pnumNode4);
        }
	nodeList.add(patt0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAL1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL1 pl1Node1;
        {
            // Block
        PAtt pattNode2;
        PL0 pl0Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pl0Node3 = (PL0)nodeArrayList2.get(0);

        pl1Node1 = new AAL1(pattNode2, pl0Node3);
        }
	nodeList.add(pl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ABL1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL1 pl1Node1;
        {
            // Block
        PL0 pl0Node2;
        PAtt pattNode3;
        pl0Node2 = (PL0)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        pl1Node1 = new ABL1(pl0Node2, pattNode3);
        }
	nodeList.add(pl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ACL1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL1 pl1Node1;
        {
            // Block
        PAtt pattNode2;
        PL0 pl0Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pl0Node3 = (PL0)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        pl1Node1 = new ACL1(pattNode2, pl0Node3, pattNode4);
        }
	nodeList.add(pl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AL0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL0 pl0Node1;
        {
            // Block
        TX1 tx1Node2;
        TIg tigNode3;
        PNum pnumNode4;
        TY1 ty1Node5;
        TIg tigNode6;
        PNum pnumNode7;
        TX2 tx2Node8;
        TIg tigNode9;
        PNum pnumNode10;
        TY2 ty2Node11;
        TIg tigNode12;
        PNum pnumNode13;
        tx1Node2 = (TX1)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);
        ty1Node5 = (TY1)nodeArrayList4.get(0);
        tigNode6 = (TIg)nodeArrayList5.get(0);
        pnumNode7 = (PNum)nodeArrayList6.get(0);
        tx2Node8 = (TX2)nodeArrayList7.get(0);
        tigNode9 = (TIg)nodeArrayList8.get(0);
        pnumNode10 = (PNum)nodeArrayList9.get(0);
        ty2Node11 = (TY2)nodeArrayList10.get(0);
        tigNode12 = (TIg)nodeArrayList11.get(0);
        pnumNode13 = (PNum)nodeArrayList12.get(0);

        pl0Node1 = new AL0(tx1Node2, tigNode3, pnumNode4, ty1Node5, tigNode6, pnumNode7, tx2Node8, tigNode9, pnumNode10, ty2Node11, tigNode12, pnumNode13);
        }
	nodeList.add(pl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAC1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC1 pc1Node1;
        {
            // Block
        PAtt pattNode2;
        PC2 pc2Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pc2Node3 = (PC2)nodeArrayList2.get(0);

        pc1Node1 = new AAC1(pattNode2, pc2Node3);
        }
	nodeList.add(pc1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ABC1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC1 pc1Node1;
        {
            // Block
        PC2 pc2Node2;
        PAtt pattNode3;
        pc2Node2 = (PC2)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        pc1Node1 = new ABC1(pc2Node2, pattNode3);
        }
	nodeList.add(pc1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ACC1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC1 pc1Node1;
        {
            // Block
        PAtt pattNode2;
        PC2 pc2Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pc2Node3 = (PC2)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        pc1Node1 = new ACC1(pattNode2, pc2Node3, pattNode4);
        }
	nodeList.add(pc1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AC2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC2 pc2Node1;
        {
            // Block
        TCx tcxNode2;
        TIg tigNode3;
        PNum pnumNode4;
        TCy tcyNode5;
        TIg tigNode6;
        PNum pnumNode7;
        TR0 tr0Node8;
        TIg tigNode9;
        PNum pnumNode10;
        tcxNode2 = (TCx)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);
        tcyNode5 = (TCy)nodeArrayList4.get(0);
        tigNode6 = (TIg)nodeArrayList5.get(0);
        pnumNode7 = (PNum)nodeArrayList6.get(0);
        tr0Node8 = (TR0)nodeArrayList7.get(0);
        tigNode9 = (TIg)nodeArrayList8.get(0);
        pnumNode10 = (PNum)nodeArrayList9.get(0);

        pc2Node1 = new AC2(tcxNode2, tigNode3, pnumNode4, tcyNode5, tigNode6, pnumNode7, tr0Node8, tigNode9, pnumNode10);
        }
	nodeList.add(pc2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAR1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR1 pr1Node1;
        {
            // Block
        PAtt pattNode2;
        PR2 pr2Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pr2Node3 = (PR2)nodeArrayList2.get(0);

        pr1Node1 = new AAR1(pattNode2, pr2Node3);
        }
	nodeList.add(pr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ABR1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR1 pr1Node1;
        {
            // Block
        PR2 pr2Node2;
        PAtt pattNode3;
        pr2Node2 = (PR2)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        pr1Node1 = new ABR1(pr2Node2, pattNode3);
        }
	nodeList.add(pr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ACR1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR1 pr1Node1;
        {
            // Block
        PAtt pattNode2;
        PR2 pr2Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pr2Node3 = (PR2)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        pr1Node1 = new ACR1(pattNode2, pr2Node3, pattNode4);
        }
	nodeList.add(pr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AR2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR2 pr2Node1;
        {
            // Block
        TX0 tx0Node2;
        TIg tigNode3;
        PNum pnumNode4;
        TY0 ty0Node5;
        TIg tigNode6;
        PNum pnumNode7;
        TWidth twidthNode8;
        TIg tigNode9;
        PNum pnumNode10;
        THeight theightNode11;
        TIg tigNode12;
        PNum pnumNode13;
        tx0Node2 = (TX0)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);
        ty0Node5 = (TY0)nodeArrayList4.get(0);
        tigNode6 = (TIg)nodeArrayList5.get(0);
        pnumNode7 = (PNum)nodeArrayList6.get(0);
        twidthNode8 = (TWidth)nodeArrayList7.get(0);
        tigNode9 = (TIg)nodeArrayList8.get(0);
        pnumNode10 = (PNum)nodeArrayList9.get(0);
        theightNode11 = (THeight)nodeArrayList10.get(0);
        tigNode12 = (TIg)nodeArrayList11.get(0);
        pnumNode13 = (PNum)nodeArrayList12.get(0);

        pr2Node1 = new AR2(tx0Node2, tigNode3, pnumNode4, ty0Node5, tigNode6, pnumNode7, twidthNode8, tigNode9, pnumNode10, theightNode11, tigNode12, pnumNode13);
        }
	nodeList.add(pr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PAtt pattNode2;
        PE0 pe0Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pe0Node3 = (PE0)nodeArrayList2.get(0);

        pe1Node1 = new AAE1(pattNode2, pe0Node3);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ABE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PE0 pe0Node2;
        PAtt pattNode3;
        pe0Node2 = (PE0)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        pe1Node1 = new ABE1(pe0Node2, pattNode3);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ACE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PAtt pattNode2;
        PE0 pe0Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pe0Node3 = (PE0)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        pe1Node1 = new ACE1(pattNode2, pe0Node3, pattNode4);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AE0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE0 pe0Node1;
        {
            // Block
        TCx tcxNode2;
        TIg tigNode3;
        PNum pnumNode4;
        TCy tcyNode5;
        TIg tigNode6;
        PNum pnumNode7;
        TRx trxNode8;
        TIg tigNode9;
        PNum pnumNode10;
        TRy tryNode11;
        TIg tigNode12;
        PNum pnumNode13;
        tcxNode2 = (TCx)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);
        tcyNode5 = (TCy)nodeArrayList4.get(0);
        tigNode6 = (TIg)nodeArrayList5.get(0);
        pnumNode7 = (PNum)nodeArrayList6.get(0);
        trxNode8 = (TRx)nodeArrayList7.get(0);
        tigNode9 = (TIg)nodeArrayList8.get(0);
        pnumNode10 = (PNum)nodeArrayList9.get(0);
        tryNode11 = (TRy)nodeArrayList10.get(0);
        tigNode12 = (TIg)nodeArrayList11.get(0);
        pnumNode13 = (PNum)nodeArrayList12.get(0);

        pe0Node1 = new AE0(tcxNode2, tigNode3, pnumNode4, tcyNode5, tigNode6, pnumNode7, trxNode8, tigNode9, pnumNode10, tryNode11, tigNode12, pnumNode13);
        }
	nodeList.add(pe0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ANum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNum pnumNode1;
        {
            // Block
        TCo tcoNode2;
        TN tnNode3;
        TCo tcoNode4;
        tcoNode2 = (TCo)nodeArrayList1.get(0);
        tnNode3 = (TN)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);

        pnumNode1 = new ANum(tcoNode2, tnNode3, tcoNode4);
        }
	nodeList.add(pnumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PAtt pattNode2;
        PP3 pp3Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pp3Node3 = (PP3)nodeArrayList2.get(0);

        ppNode1 = new AAP(pattNode2, pp3Node3);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ABP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PP3 pp3Node2;
        PAtt pattNode3;
        pp3Node2 = (PP3)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        ppNode1 = new ABP(pp3Node2, pattNode3);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ACP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PAtt pattNode2;
        PP3 pp3Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pp3Node3 = (PP3)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        ppNode1 = new ACP(pattNode2, pp3Node3, pattNode4);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AP3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP3 pp3Node1;
        {
            // Block
        TPoints tpointsNode2;
        TIg tigNode3;
        TCo tcoNode4;
        PP0 pp0Node5;
        TCo tcoNode6;
        tpointsNode2 = (TPoints)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        pp0Node5 = (PP0)nodeArrayList4.get(0);
        tcoNode6 = (TCo)nodeArrayList5.get(0);

        pp3Node1 = new AP3(tpointsNode2, tigNode3, tcoNode4, pp0Node5, tcoNode6);
        }
	nodeList.add(pp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAP0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP0 pp0Node1;
        {
            // Block
        PP1 pp1Node2;
        pp1Node2 = (PP1)nodeArrayList1.get(0);

        pp0Node1 = new AAP0(pp1Node2);
        }
	nodeList.add(pp0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ABP0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP0 pp0Node1;
        {
            // Block
        PP0 pp0Node2;
        PP1 pp1Node3;
        pp0Node2 = (PP0)nodeArrayList1.get(0);
        pp1Node3 = (PP1)nodeArrayList2.get(0);

        pp0Node1 = new ABP0(pp0Node2, pp1Node3);
        }
	nodeList.add(pp0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AP1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP1 pp1Node1;
        {
            // Block
        TN tnNode2;
        TComa tcomaNode3;
        TN tnNode4;
        tnNode2 = (TN)nodeArrayList1.get(0);
        tcomaNode3 = (TComa)nodeArrayList2.get(0);
        tnNode4 = (TN)nodeArrayList3.get(0);

        pp1Node1 = new AP1(tnNode2, tcomaNode3, tnNode4);
        }
	nodeList.add(pp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AS */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        {
            // Block
        TStyle tstyleNode2;
        TIg tigNode3;
        TCo tcoNode4;
        PSp pspNode5;
        TCo tcoNode6;
        tstyleNode2 = (TStyle)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        pspNode5 = (PSp)nodeArrayList4.get(0);
        tcoNode6 = (TCo)nodeArrayList5.get(0);

        psNode1 = new AS(tstyleNode2, tigNode3, tcoNode4, pspNode5, tcoNode6);
        }
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AASp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp pspNode1;
        {
            // Block
        PSp0 psp0Node2;
        psp0Node2 = (PSp0)nodeArrayList1.get(0);

        pspNode1 = new AASp(psp0Node2);
        }
	nodeList.add(pspNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ABSp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp pspNode1;
        {
            // Block
        PSp pspNode2;
        TPc tpcNode3;
        PSp0 psp0Node4;
        pspNode2 = (PSp)nodeArrayList1.get(0);
        tpcNode3 = (TPc)nodeArrayList2.get(0);
        psp0Node4 = (PSp0)nodeArrayList3.get(0);

        pspNode1 = new ABSp(pspNode2, tpcNode3, psp0Node4);
        }
	nodeList.add(pspNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AASp0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp0 psp0Node1;
        {
            // Block
        TFill tfillNode2;
        TDosp tdospNode3;
        TC0 tc0Node4;
        tfillNode2 = (TFill)nodeArrayList1.get(0);
        tdospNode3 = (TDosp)nodeArrayList2.get(0);
        tc0Node4 = (TC0)nodeArrayList3.get(0);

        psp0Node1 = new AASp0(tfillNode2, tdospNode3, tc0Node4);
        }
	nodeList.add(psp0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ABSp0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp0 psp0Node1;
        {
            // Block
        TStroke tstrokeNode2;
        TDosp tdospNode3;
        TC0 tc0Node4;
        tstrokeNode2 = (TStroke)nodeArrayList1.get(0);
        tdospNode3 = (TDosp)nodeArrayList2.get(0);
        tc0Node4 = (TC0)nodeArrayList3.get(0);

        psp0Node1 = new ABSp0(tstrokeNode2, tdospNode3, tc0Node4);
        }
	nodeList.add(psp0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ACSp0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp0 psp0Node1;
        {
            // Block
        TStrokew tstrokewNode2;
        TDosp tdospNode3;
        TN tnNode4;
        tstrokewNode2 = (TStrokew)nodeArrayList1.get(0);
        tdospNode3 = (TDosp)nodeArrayList2.get(0);
        tnNode4 = (TN)nodeArrayList3.get(0);

        psp0Node1 = new ACSp0(tstrokewNode2, tdospNode3, tnNode4);
        }
	nodeList.add(psp0Node1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, },
			{{-1, ERROR, 1}, {3, SHIFT, 3}, },
			{{-1, ERROR, 2}, {35, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {7, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 8}, {10, SHIFT, 9}, {11, SHIFT, 10}, {12, SHIFT, 11}, {28, SHIFT, 12}, },
			{{-1, ERROR, 4}, {2, SHIFT, 15}, {3, SHIFT, 3}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 6}, {13, SHIFT, 17}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 7}, {17, SHIFT, 25}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 8}, {20, SHIFT, 29}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 9}, {17, SHIFT, 33}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 10}, {26, SHIFT, 37}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 11}, {26, SHIFT, 37}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 12}, {6, SHIFT, 42}, },
			{{-1, ERROR, 13}, {4, SHIFT, 43}, {28, SHIFT, 12}, },
			{{-1, ERROR, 14}, {7, SHIFT, 6}, {8, SHIFT, 7}, {9, SHIFT, 8}, {10, SHIFT, 9}, {11, SHIFT, 10}, {12, SHIFT, 11}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 17}, {6, SHIFT, 46}, },
			{{-1, ERROR, 18}, {6, SHIFT, 47}, },
			{{-1, ERROR, 19}, {6, SHIFT, 48}, },
			{{-1, ERROR, 20}, {6, SHIFT, 49}, },
			{{-1, ERROR, 21}, {13, SHIFT, 17}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 24}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 25}, {6, SHIFT, 53}, },
			{{-1, ERROR, 26}, {17, SHIFT, 25}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 28}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 29}, {6, SHIFT, 56}, },
			{{-1, ERROR, 30}, {20, SHIFT, 29}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 32}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 33}, {6, SHIFT, 59}, },
			{{-1, ERROR, 34}, {17, SHIFT, 33}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 36}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 37}, {6, SHIFT, 62}, },
			{{-1, ERROR, 38}, {26, SHIFT, 37}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 40}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 42}, {5, SHIFT, 65}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 44}, {4, SHIFT, 66}, },
			{{-1, ERROR, 45}, {4, SHIFT, 67}, },
			{{-1, ERROR, 46}, {5, SHIFT, 68}, },
			{{-1, ERROR, 47}, {5, SHIFT, 70}, },
			{{-1, ERROR, 48}, {5, SHIFT, 71}, },
			{{-1, ERROR, 49}, {5, SHIFT, 68}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 17}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, REDUCE, 18}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 53}, {5, SHIFT, 68}, },
			{{-1, REDUCE, 21}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, REDUCE, 22}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 56}, {5, SHIFT, 68}, },
			{{-1, REDUCE, 25}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, REDUCE, 26}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 59}, {5, SHIFT, 68}, },
			{{-1, REDUCE, 29}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, REDUCE, 30}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 62}, {5, SHIFT, 80}, },
			{{-1, REDUCE, 34}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, REDUCE, 35}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 65}, {29, SHIFT, 82}, {30, SHIFT, 83}, {31, SHIFT, 84}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 68}, {0, SHIFT, 87}, },
			{{-1, ERROR, 69}, {14, SHIFT, 88}, },
			{{-1, ERROR, 70}, {32, SHIFT, 89}, },
			{{-1, ERROR, 71}, {32, SHIFT, 90}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 19}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 74}, {18, SHIFT, 91}, },
			{{-1, REDUCE, 23}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 76}, {21, SHIFT, 92}, },
			{{-1, REDUCE, 27}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 78}, {18, SHIFT, 93}, },
			{{-1, REDUCE, 31}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 80}, {0, SHIFT, 94}, },
			{{-1, REDUCE, 36}, {29, SHIFT, 18}, {30, SHIFT, 19}, {31, SHIFT, 20}, },
			{{-1, ERROR, 82}, {34, SHIFT, 97}, },
			{{-1, ERROR, 83}, {34, SHIFT, 98}, },
			{{-1, ERROR, 84}, {34, SHIFT, 99}, },
			{{-1, ERROR, 85}, {5, SHIFT, 100}, {33, SHIFT, 101}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 87}, {5, SHIFT, 102}, },
			{{-1, ERROR, 88}, {6, SHIFT, 103}, },
			{{-1, ERROR, 89}, {5, SHIFT, 104}, },
			{{-1, ERROR, 90}, {5, SHIFT, 105}, },
			{{-1, ERROR, 91}, {6, SHIFT, 106}, },
			{{-1, ERROR, 92}, {6, SHIFT, 107}, },
			{{-1, ERROR, 93}, {6, SHIFT, 108}, },
			{{-1, ERROR, 94}, {27, SHIFT, 109}, },
			{{-1, ERROR, 95}, {0, SHIFT, 94}, {5, SHIFT, 110}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 97}, {32, SHIFT, 112}, },
			{{-1, ERROR, 98}, {32, SHIFT, 113}, },
			{{-1, ERROR, 99}, {0, SHIFT, 114}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 101}, {29, SHIFT, 82}, {30, SHIFT, 83}, {31, SHIFT, 84}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 103}, {5, SHIFT, 68}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 106}, {5, SHIFT, 68}, },
			{{-1, ERROR, 107}, {5, SHIFT, 68}, },
			{{-1, ERROR, 108}, {5, SHIFT, 68}, },
			{{-1, ERROR, 109}, {0, SHIFT, 120}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 116}, {15, SHIFT, 121}, },
			{{-1, ERROR, 117}, {19, SHIFT, 122}, },
			{{-1, ERROR, 118}, {22, SHIFT, 123}, },
			{{-1, ERROR, 119}, {24, SHIFT, 124}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 121}, {6, SHIFT, 125}, },
			{{-1, ERROR, 122}, {6, SHIFT, 126}, },
			{{-1, ERROR, 123}, {6, SHIFT, 127}, },
			{{-1, ERROR, 124}, {6, SHIFT, 128}, },
			{{-1, ERROR, 125}, {5, SHIFT, 68}, },
			{{-1, ERROR, 126}, {5, SHIFT, 68}, },
			{{-1, ERROR, 127}, {5, SHIFT, 68}, },
			{{-1, ERROR, 128}, {5, SHIFT, 68}, },
			{{-1, ERROR, 129}, {16, SHIFT, 133}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 131}, {23, SHIFT, 134}, },
			{{-1, ERROR, 132}, {25, SHIFT, 135}, },
			{{-1, ERROR, 133}, {6, SHIFT, 136}, },
			{{-1, ERROR, 134}, {6, SHIFT, 137}, },
			{{-1, ERROR, 135}, {6, SHIFT, 138}, },
			{{-1, ERROR, 136}, {5, SHIFT, 68}, },
			{{-1, ERROR, 137}, {5, SHIFT, 68}, },
			{{-1, ERROR, 138}, {5, SHIFT, 68}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 32}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 4}, },
			{{-1, 5}, {4, 16}, },
			{{-1, 13}, {14, 45}, },
			{{-1, 38}, {6, 21}, {7, 26}, {8, 30}, {9, 34}, {24, 52}, {28, 55}, {32, 58}, {36, 61}, {40, 64}, {51, 73}, {54, 75}, {57, 77}, {60, 79}, {63, 81}, },
			{{-1, 22}, {21, 50}, {26, 50}, {30, 50}, {34, 50}, {38, 50}, {52, 50}, {55, 50}, {58, 50}, {61, 50}, {64, 50}, {73, 50}, {75, 50}, {77, 50}, {79, 50}, {81, 50}, },
			{{-1, 23}, },
			{{-1, 24}, {21, 51}, },
			{{-1, 27}, },
			{{-1, 28}, {26, 54}, },
			{{-1, 31}, },
			{{-1, 32}, {30, 57}, },
			{{-1, 35}, },
			{{-1, 36}, {34, 60}, },
			{{-1, 69}, {49, 72}, {53, 74}, {56, 76}, {59, 78}, {103, 116}, {106, 117}, {107, 118}, {108, 119}, {125, 129}, {126, 130}, {127, 131}, {128, 132}, {136, 139}, {137, 140}, {138, 141}, },
			{{-1, 39}, {11, 41}, },
			{{-1, 40}, {38, 63}, },
			{{-1, 95}, },
			{{-1, 96}, {95, 111}, },
			{{-1, 14}, {13, 44}, },
			{{-1, 85}, },
			{{-1, 86}, {101, 115}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '<svg>'",
			"expecting: '<'",
			"expecting: EOF",
			"expecting: 'line', 'circle', 'rect', 'ellipse', 'polygon', 'polyline', 'style'",
			"expecting: '</svg>', '<'",
			"expecting: 'x1', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'cx', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'x', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'points', 'fill', 'stroke', 'stroke-width'",
			"expecting: '='",
			"expecting: '/>', 'style'",
			"expecting: 'line', 'circle', 'rect', 'ellipse', 'polygon', 'polyline'",
			"expecting: '/>', 'x1', 'cx', 'x', 'points', 'style', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'fill', 'stroke', 'stroke-width'",
			"expecting: '"'",
			"expecting: '/>'",
			"expecting: '/>', 'style', 'fill', 'stroke', 'stroke-width'",
			"expecting: n",
			"expecting: 'y1'",
			"expecting: c0",
			"expecting: 'cy'",
			"expecting: 'y'",
			"expecting: ':'",
			"expecting: '"', ';'",
			"expecting: ','",
			"expecting: n, '"'",
			"expecting: '/>', 'line', 'circle', 'rect', 'ellipse', 'polygon', 'polyline'",
			"expecting: '/>', 'x1', 'y1', 'x2', 'y2', 'cx', 'cy', 'r', 'x', 'y', 'width', 'height', 'rx', 'ry', 'points', 'style', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'x2'",
			"expecting: 'r'",
			"expecting: 'width'",
			"expecting: 'rx'",
			"expecting: 'y2'",
			"expecting: 'height'",
			"expecting: 'ry'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 5, 6, 7, 6, 8, 8, 9, 10, 11, 2, 4, 9, 9, 9, 9, 5, 12, 10, 13, 9, 6, 10, 13, 9, 7, 10, 13, 9, 6, 10, 13, 9, 8, 10, 13, 10, 14, 4, 15, 15, 14, 14, 14, 14, 12, 16, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 13, 4, 4, 17, 18, 19, 19, 12, 16, 20, 16, 21, 16, 20, 16, 17, 16, 22, 22, 22, 23, 23, 14, 9, 14, 14, 9, 9, 9, 24, 25, 25, 19, 19, 17, 26, 13, 27, 14, 12, 12, 14, 14, 14, 17, 16, 25, 23, 23, 23, 23, 28, 29, 30, 31, 25, 9, 9, 9, 9, 14, 14, 14, 14, 32, 16, 33, 34, 9, 9, 9, 14, 14, 14, 16, 16, 16, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

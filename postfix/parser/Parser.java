/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.parser;

import postfix.lexer.*;
import postfix.node.*;
import postfix.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAStart */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ABStart */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce ADim */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAPr */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce ABPr */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ACPr */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAPr1 */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce ABPr1 */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce ACPr1 */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AAMayus0 */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce ABMayus0 */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AFig1 */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AAFig0 */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce ABFig0 */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce ACFig0 */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list, false);
            }
            break;
            case 15: /* reduce ADFig0 */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce AEFig0 */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list, false);
            }
            break;
            case 17: /* reduce AFFig0 */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce AAF */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list, false);
            }
            break;
            case 19: /* reduce ABF */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce ACF */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list, false);
            }
            break;
            case 21: /* reduce ADF */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list, false);
            }
            break;
            case 22: /* reduce AEF */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list, false);
            }
            break;
            case 23: /* reduce AFF */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list, false);
            }
            break;
            case 24: /* reduce AAAtt */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list, false);
            }
            break;
            case 25: /* reduce ABAtt */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list, false);
            }
            break;
            case 26: /* reduce AAAtt0 */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list, false);
            }
            break;
            case 27: /* reduce ABAtt0 */
            {
                ArrayList<Object> list = new27();
                push(goTo(9), list, false);
            }
            break;
            case 28: /* reduce ACAtt0 */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list, false);
            }
            break;
            case 29: /* reduce AAL1 */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list, false);
            }
            break;
            case 30: /* reduce ABL1 */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list, false);
            }
            break;
            case 31: /* reduce ACL1 */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list, false);
            }
            break;
            case 32: /* reduce ADL1 */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list, false);
            }
            break;
            case 33: /* reduce AL0 */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list, false);
            }
            break;
            case 34: /* reduce AAC1 */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list, false);
            }
            break;
            case 35: /* reduce ABC1 */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list, false);
            }
            break;
            case 36: /* reduce ACC1 */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list, false);
            }
            break;
            case 37: /* reduce ADC1 */
            {
                ArrayList<Object> list = new37();
                push(goTo(12), list, false);
            }
            break;
            case 38: /* reduce AC2 */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list, false);
            }
            break;
            case 39: /* reduce AAR1 */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list, false);
            }
            break;
            case 40: /* reduce ABR1 */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list, false);
            }
            break;
            case 41: /* reduce ACR1 */
            {
                ArrayList<Object> list = new41();
                push(goTo(14), list, false);
            }
            break;
            case 42: /* reduce ADR1 */
            {
                ArrayList<Object> list = new42();
                push(goTo(14), list, false);
            }
            break;
            case 43: /* reduce AR2 */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list, false);
            }
            break;
            case 44: /* reduce AAE1 */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list, false);
            }
            break;
            case 45: /* reduce ABE1 */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list, false);
            }
            break;
            case 46: /* reduce ACE1 */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list, false);
            }
            break;
            case 47: /* reduce ADE1 */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list, false);
            }
            break;
            case 48: /* reduce AE0 */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list, false);
            }
            break;
            case 49: /* reduce ANum */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list, false);
            }
            break;
            case 50: /* reduce AAP */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list, false);
            }
            break;
            case 51: /* reduce ABP */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list, false);
            }
            break;
            case 52: /* reduce ACP */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list, false);
            }
            break;
            case 53: /* reduce AP3 */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list, false);
            }
            break;
            case 54: /* reduce AAP0 */
            {
                ArrayList<Object> list = new54();
                push(goTo(21), list, false);
            }
            break;
            case 55: /* reduce ABP0 */
            {
                ArrayList<Object> list = new55();
                push(goTo(21), list, false);
            }
            break;
            case 56: /* reduce AP1 */
            {
                ArrayList<Object> list = new56();
                push(goTo(22), list, false);
            }
            break;
            case 57: /* reduce AS */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list, false);
            }
            break;
            case 58: /* reduce AASp */
            {
                ArrayList<Object> list = new58();
                push(goTo(24), list, false);
            }
            break;
            case 59: /* reduce ABSp */
            {
                ArrayList<Object> list = new59();
                push(goTo(24), list, false);
            }
            break;
            case 60: /* reduce AASp0 */
            {
                ArrayList<Object> list = new60();
                push(goTo(25), list, false);
            }
            break;
            case 61: /* reduce ABSp0 */
            {
                ArrayList<Object> list = new61();
                push(goTo(25), list, false);
            }
            break;
            case 62: /* reduce ACSp0 */
            {
                ArrayList<Object> list = new62();
                push(goTo(25), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TSvg1 tsvg1Node2;
        TMayus tmayusNode3;
        PPr pprNode4;
        TSvg2 tsvg2Node5;
        tsvg1Node2 = (TSvg1)nodeArrayList1.get(0);
        tmayusNode3 = (TMayus)nodeArrayList2.get(0);
        pprNode4 = (PPr)nodeArrayList3.get(0);
        tsvg2Node5 = (TSvg2)nodeArrayList4.get(0);

        pstartNode1 = new AAStart(tsvg1Node2, tmayusNode3, pprNode4, tsvg2Node5);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ABStart */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TSvg1 tsvg1Node2;
        PDim pdimNode3;
        TMayus tmayusNode4;
        PPr pprNode5;
        TSvg2 tsvg2Node6;
        tsvg1Node2 = (TSvg1)nodeArrayList1.get(0);
        pdimNode3 = (PDim)nodeArrayList2.get(0);
        tmayusNode4 = (TMayus)nodeArrayList3.get(0);
        pprNode5 = (PPr)nodeArrayList4.get(0);
        tsvg2Node6 = (TSvg2)nodeArrayList5.get(0);

        pstartNode1 = new ABStart(tsvg1Node2, pdimNode3, tmayusNode4, pprNode5, tsvg2Node6);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADim */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDim pdimNode1;
        {
            // Block
        TWidth twidthNode2;
        TIg tigNode3;
        PNum pnumNode4;
        THeight theightNode5;
        TIg tigNode6;
        PNum pnumNode7;
        twidthNode2 = (TWidth)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);
        theightNode5 = (THeight)nodeArrayList4.get(0);
        tigNode6 = (TIg)nodeArrayList5.get(0);
        pnumNode7 = (PNum)nodeArrayList6.get(0);

        pdimNode1 = new ADim(twidthNode2, tigNode3, pnumNode4, theightNode5, tigNode6, pnumNode7);
        }
	nodeList.add(pdimNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAPr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr pprNode1;
        {
            // Block
        PPr1 ppr1Node2;
        ppr1Node2 = (PPr1)nodeArrayList1.get(0);

        pprNode1 = new AAPr(ppr1Node2);
        }
	nodeList.add(pprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ABPr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr pprNode1;
        {
            // Block
        PPr pprNode2;
        PPr1 ppr1Node3;
        pprNode2 = (PPr)nodeArrayList1.get(0);
        ppr1Node3 = (PPr1)nodeArrayList2.get(0);

        pprNode1 = new ABPr(pprNode2, ppr1Node3);
        }
	nodeList.add(pprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ACPr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr pprNode1;
        {
            // Block
        PPr pprNode2;
        PFig1 pfig1Node3;
        pprNode2 = (PPr)nodeArrayList1.get(0);
        pfig1Node3 = (PFig1)nodeArrayList2.get(0);

        pprNode1 = new ACPr(pprNode2, pfig1Node3);
        }
	nodeList.add(pprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAPr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr1 ppr1Node1;
        {
            // Block
        TMinus tminusNode2;
        PF pfNode3;
        PS psNode4;
        PMayus0 pmayus0Node5;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pfNode3 = (PF)nodeArrayList2.get(0);
        psNode4 = (PS)nodeArrayList3.get(0);
        pmayus0Node5 = (PMayus0)nodeArrayList4.get(0);

        ppr1Node1 = new AAPr1(tminusNode2, pfNode3, psNode4, pmayus0Node5);
        }
	nodeList.add(ppr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ABPr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr1 ppr1Node1;
        {
            // Block
        TMinus tminusNode2;
        PF pfNode3;
        PMayus0 pmayus0Node4;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pfNode3 = (PF)nodeArrayList2.get(0);
        pmayus0Node4 = (PMayus0)nodeArrayList3.get(0);

        ppr1Node1 = new ABPr1(tminusNode2, pfNode3, pmayus0Node4);
        }
	nodeList.add(ppr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ACPr1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPr1 ppr1Node1;
        {
            // Block
        TMinus tminusNode2;
        PS psNode3;
        PF pfNode4;
        PMayus0 pmayus0Node5;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        psNode3 = (PS)nodeArrayList2.get(0);
        pfNode4 = (PF)nodeArrayList3.get(0);
        pmayus0Node5 = (PMayus0)nodeArrayList4.get(0);

        ppr1Node1 = new ACPr1(tminusNode2, psNode3, pfNode4, pmayus0Node5);
        }
	nodeList.add(ppr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAMayus0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMayus0 pmayus0Node1;
        {
            // Block
        TMayus tmayusNode2;
        tmayusNode2 = (TMayus)nodeArrayList1.get(0);

        pmayus0Node1 = new AAMayus0(tmayusNode2);
        }
	nodeList.add(pmayus0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ABMayus0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMayus0 pmayus0Node1;
        {
            // Block
        TSl tslNode2;
        TMayus tmayusNode3;
        tslNode2 = (TSl)nodeArrayList1.get(0);
        tmayusNode3 = (TMayus)nodeArrayList2.get(0);

        pmayus0Node1 = new ABMayus0(tslNode2, tmayusNode3);
        }
	nodeList.add(pmayus0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AFig1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFig1 pfig1Node1;
        {
            // Block
        TMinus tminusNode2;
        TSl tslNode3;
        PFig0 pfig0Node4;
        TMayus tmayusNode5;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        tslNode3 = (TSl)nodeArrayList2.get(0);
        pfig0Node4 = (PFig0)nodeArrayList3.get(0);
        tmayusNode5 = (TMayus)nodeArrayList4.get(0);

        pfig1Node1 = new AFig1(tminusNode2, tslNode3, pfig0Node4, tmayusNode5);
        }
	nodeList.add(pfig1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAFig0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFig0 pfig0Node1;
        {
            // Block
        TLine tlineNode2;
        tlineNode2 = (TLine)nodeArrayList1.get(0);

        pfig0Node1 = new AAFig0(tlineNode2);
        }
	nodeList.add(pfig0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ABFig0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFig0 pfig0Node1;
        {
            // Block
        TCircle tcircleNode2;
        tcircleNode2 = (TCircle)nodeArrayList1.get(0);

        pfig0Node1 = new ABFig0(tcircleNode2);
        }
	nodeList.add(pfig0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ACFig0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFig0 pfig0Node1;
        {
            // Block
        TRect trectNode2;
        trectNode2 = (TRect)nodeArrayList1.get(0);

        pfig0Node1 = new ACFig0(trectNode2);
        }
	nodeList.add(pfig0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ADFig0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFig0 pfig0Node1;
        {
            // Block
        TEllipse tellipseNode2;
        tellipseNode2 = (TEllipse)nodeArrayList1.get(0);

        pfig0Node1 = new ADFig0(tellipseNode2);
        }
	nodeList.add(pfig0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AEFig0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFig0 pfig0Node1;
        {
            // Block
        TPolygon tpolygonNode2;
        tpolygonNode2 = (TPolygon)nodeArrayList1.get(0);

        pfig0Node1 = new AEFig0(tpolygonNode2);
        }
	nodeList.add(pfig0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AFFig0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFig0 pfig0Node1;
        {
            // Block
        TPolyline tpolylineNode2;
        tpolylineNode2 = (TPolyline)nodeArrayList1.get(0);

        pfig0Node1 = new AFFig0(tpolylineNode2);
        }
	nodeList.add(pfig0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TLine tlineNode2;
        PL1 pl1Node3;
        tlineNode2 = (TLine)nodeArrayList1.get(0);
        pl1Node3 = (PL1)nodeArrayList2.get(0);

        pfNode1 = new AAF(tlineNode2, pl1Node3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ABF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TCircle tcircleNode2;
        PC1 pc1Node3;
        tcircleNode2 = (TCircle)nodeArrayList1.get(0);
        pc1Node3 = (PC1)nodeArrayList2.get(0);

        pfNode1 = new ABF(tcircleNode2, pc1Node3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ACF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TRect trectNode2;
        PR1 pr1Node3;
        trectNode2 = (TRect)nodeArrayList1.get(0);
        pr1Node3 = (PR1)nodeArrayList2.get(0);

        pfNode1 = new ACF(trectNode2, pr1Node3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ADF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TEllipse tellipseNode2;
        PE1 pe1Node3;
        tellipseNode2 = (TEllipse)nodeArrayList1.get(0);
        pe1Node3 = (PE1)nodeArrayList2.get(0);

        pfNode1 = new ADF(tellipseNode2, pe1Node3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AEF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TPolygon tpolygonNode2;
        PP ppNode3;
        tpolygonNode2 = (TPolygon)nodeArrayList1.get(0);
        ppNode3 = (PP)nodeArrayList2.get(0);

        pfNode1 = new AEF(tpolygonNode2, ppNode3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TPolyline tpolylineNode2;
        PP ppNode3;
        tpolylineNode2 = (TPolyline)nodeArrayList1.get(0);
        ppNode3 = (PP)nodeArrayList2.get(0);

        pfNode1 = new AFF(tpolylineNode2, ppNode3);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAAtt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt pattNode1;
        {
            // Block
        PAtt0 patt0Node2;
        patt0Node2 = (PAtt0)nodeArrayList1.get(0);

        pattNode1 = new AAAtt(patt0Node2);
        }
	nodeList.add(pattNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ABAtt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt pattNode1;
        {
            // Block
        PAtt pattNode2;
        PAtt0 patt0Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        patt0Node3 = (PAtt0)nodeArrayList2.get(0);

        pattNode1 = new ABAtt(pattNode2, patt0Node3);
        }
	nodeList.add(pattNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAAtt0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt0 patt0Node1;
        {
            // Block
        TFill tfillNode2;
        TIg tigNode3;
        TCo tcoNode4;
        TC0 tc0Node5;
        TCo tcoNode6;
        tfillNode2 = (TFill)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        tc0Node5 = (TC0)nodeArrayList4.get(0);
        tcoNode6 = (TCo)nodeArrayList5.get(0);

        patt0Node1 = new AAAtt0(tfillNode2, tigNode3, tcoNode4, tc0Node5, tcoNode6);
        }
	nodeList.add(patt0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ABAtt0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt0 patt0Node1;
        {
            // Block
        TStroke tstrokeNode2;
        TIg tigNode3;
        TCo tcoNode4;
        TC0 tc0Node5;
        TCo tcoNode6;
        tstrokeNode2 = (TStroke)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        tc0Node5 = (TC0)nodeArrayList4.get(0);
        tcoNode6 = (TCo)nodeArrayList5.get(0);

        patt0Node1 = new ABAtt0(tstrokeNode2, tigNode3, tcoNode4, tc0Node5, tcoNode6);
        }
	nodeList.add(patt0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACAtt0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtt0 patt0Node1;
        {
            // Block
        TStrokew tstrokewNode2;
        TIg tigNode3;
        PNum pnumNode4;
        tstrokewNode2 = (TStrokew)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);

        patt0Node1 = new ACAtt0(tstrokewNode2, tigNode3, pnumNode4);
        }
	nodeList.add(patt0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAL1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL1 pl1Node1;
        {
            // Block
        PAtt pattNode2;
        PL0 pl0Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pl0Node3 = (PL0)nodeArrayList2.get(0);

        pl1Node1 = new AAL1(pattNode2, pl0Node3);
        }
	nodeList.add(pl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ABL1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL1 pl1Node1;
        {
            // Block
        PL0 pl0Node2;
        PAtt pattNode3;
        pl0Node2 = (PL0)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        pl1Node1 = new ABL1(pl0Node2, pattNode3);
        }
	nodeList.add(pl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ACL1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL1 pl1Node1;
        {
            // Block
        PAtt pattNode2;
        PL0 pl0Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pl0Node3 = (PL0)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        pl1Node1 = new ACL1(pattNode2, pl0Node3, pattNode4);
        }
	nodeList.add(pl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ADL1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL1 pl1Node1;
        {
            // Block
        PL0 pl0Node2;
        pl0Node2 = (PL0)nodeArrayList1.get(0);

        pl1Node1 = new ADL1(pl0Node2);
        }
	nodeList.add(pl1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AL0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PL0 pl0Node1;
        {
            // Block
        TX1 tx1Node2;
        TIg tigNode3;
        PNum pnumNode4;
        TY1 ty1Node5;
        TIg tigNode6;
        PNum pnumNode7;
        TX2 tx2Node8;
        TIg tigNode9;
        PNum pnumNode10;
        TY2 ty2Node11;
        TIg tigNode12;
        PNum pnumNode13;
        tx1Node2 = (TX1)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);
        ty1Node5 = (TY1)nodeArrayList4.get(0);
        tigNode6 = (TIg)nodeArrayList5.get(0);
        pnumNode7 = (PNum)nodeArrayList6.get(0);
        tx2Node8 = (TX2)nodeArrayList7.get(0);
        tigNode9 = (TIg)nodeArrayList8.get(0);
        pnumNode10 = (PNum)nodeArrayList9.get(0);
        ty2Node11 = (TY2)nodeArrayList10.get(0);
        tigNode12 = (TIg)nodeArrayList11.get(0);
        pnumNode13 = (PNum)nodeArrayList12.get(0);

        pl0Node1 = new AL0(tx1Node2, tigNode3, pnumNode4, ty1Node5, tigNode6, pnumNode7, tx2Node8, tigNode9, pnumNode10, ty2Node11, tigNode12, pnumNode13);
        }
	nodeList.add(pl0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAC1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC1 pc1Node1;
        {
            // Block
        PAtt pattNode2;
        PC2 pc2Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pc2Node3 = (PC2)nodeArrayList2.get(0);

        pc1Node1 = new AAC1(pattNode2, pc2Node3);
        }
	nodeList.add(pc1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ABC1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC1 pc1Node1;
        {
            // Block
        PC2 pc2Node2;
        PAtt pattNode3;
        pc2Node2 = (PC2)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        pc1Node1 = new ABC1(pc2Node2, pattNode3);
        }
	nodeList.add(pc1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ACC1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC1 pc1Node1;
        {
            // Block
        PAtt pattNode2;
        PC2 pc2Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pc2Node3 = (PC2)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        pc1Node1 = new ACC1(pattNode2, pc2Node3, pattNode4);
        }
	nodeList.add(pc1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ADC1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC1 pc1Node1;
        {
            // Block
        PC2 pc2Node2;
        pc2Node2 = (PC2)nodeArrayList1.get(0);

        pc1Node1 = new ADC1(pc2Node2);
        }
	nodeList.add(pc1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AC2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PC2 pc2Node1;
        {
            // Block
        TCx tcxNode2;
        TIg tigNode3;
        PNum pnumNode4;
        TCy tcyNode5;
        TIg tigNode6;
        PNum pnumNode7;
        TR0 tr0Node8;
        TIg tigNode9;
        PNum pnumNode10;
        tcxNode2 = (TCx)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);
        tcyNode5 = (TCy)nodeArrayList4.get(0);
        tigNode6 = (TIg)nodeArrayList5.get(0);
        pnumNode7 = (PNum)nodeArrayList6.get(0);
        tr0Node8 = (TR0)nodeArrayList7.get(0);
        tigNode9 = (TIg)nodeArrayList8.get(0);
        pnumNode10 = (PNum)nodeArrayList9.get(0);

        pc2Node1 = new AC2(tcxNode2, tigNode3, pnumNode4, tcyNode5, tigNode6, pnumNode7, tr0Node8, tigNode9, pnumNode10);
        }
	nodeList.add(pc2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAR1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR1 pr1Node1;
        {
            // Block
        PAtt pattNode2;
        PR2 pr2Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pr2Node3 = (PR2)nodeArrayList2.get(0);

        pr1Node1 = new AAR1(pattNode2, pr2Node3);
        }
	nodeList.add(pr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ABR1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR1 pr1Node1;
        {
            // Block
        PR2 pr2Node2;
        PAtt pattNode3;
        pr2Node2 = (PR2)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        pr1Node1 = new ABR1(pr2Node2, pattNode3);
        }
	nodeList.add(pr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ACR1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR1 pr1Node1;
        {
            // Block
        PAtt pattNode2;
        PR2 pr2Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pr2Node3 = (PR2)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        pr1Node1 = new ACR1(pattNode2, pr2Node3, pattNode4);
        }
	nodeList.add(pr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ADR1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR1 pr1Node1;
        {
            // Block
        PR2 pr2Node2;
        pr2Node2 = (PR2)nodeArrayList1.get(0);

        pr1Node1 = new ADR1(pr2Node2);
        }
	nodeList.add(pr1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AR2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PR2 pr2Node1;
        {
            // Block
        TX0 tx0Node2;
        TIg tigNode3;
        PNum pnumNode4;
        TY0 ty0Node5;
        TIg tigNode6;
        PNum pnumNode7;
        TWidth twidthNode8;
        TIg tigNode9;
        PNum pnumNode10;
        THeight theightNode11;
        TIg tigNode12;
        PNum pnumNode13;
        tx0Node2 = (TX0)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);
        ty0Node5 = (TY0)nodeArrayList4.get(0);
        tigNode6 = (TIg)nodeArrayList5.get(0);
        pnumNode7 = (PNum)nodeArrayList6.get(0);
        twidthNode8 = (TWidth)nodeArrayList7.get(0);
        tigNode9 = (TIg)nodeArrayList8.get(0);
        pnumNode10 = (PNum)nodeArrayList9.get(0);
        theightNode11 = (THeight)nodeArrayList10.get(0);
        tigNode12 = (TIg)nodeArrayList11.get(0);
        pnumNode13 = (PNum)nodeArrayList12.get(0);

        pr2Node1 = new AR2(tx0Node2, tigNode3, pnumNode4, ty0Node5, tigNode6, pnumNode7, twidthNode8, tigNode9, pnumNode10, theightNode11, tigNode12, pnumNode13);
        }
	nodeList.add(pr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PAtt pattNode2;
        PE0 pe0Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pe0Node3 = (PE0)nodeArrayList2.get(0);

        pe1Node1 = new AAE1(pattNode2, pe0Node3);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ABE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PE0 pe0Node2;
        PAtt pattNode3;
        pe0Node2 = (PE0)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        pe1Node1 = new ABE1(pe0Node2, pattNode3);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ACE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PAtt pattNode2;
        PE0 pe0Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pe0Node3 = (PE0)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        pe1Node1 = new ACE1(pattNode2, pe0Node3, pattNode4);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ADE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PE0 pe0Node2;
        pe0Node2 = (PE0)nodeArrayList1.get(0);

        pe1Node1 = new ADE1(pe0Node2);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AE0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE0 pe0Node1;
        {
            // Block
        TCx tcxNode2;
        TIg tigNode3;
        PNum pnumNode4;
        TCy tcyNode5;
        TIg tigNode6;
        PNum pnumNode7;
        TRx trxNode8;
        TIg tigNode9;
        PNum pnumNode10;
        TRy tryNode11;
        TIg tigNode12;
        PNum pnumNode13;
        tcxNode2 = (TCx)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        pnumNode4 = (PNum)nodeArrayList3.get(0);
        tcyNode5 = (TCy)nodeArrayList4.get(0);
        tigNode6 = (TIg)nodeArrayList5.get(0);
        pnumNode7 = (PNum)nodeArrayList6.get(0);
        trxNode8 = (TRx)nodeArrayList7.get(0);
        tigNode9 = (TIg)nodeArrayList8.get(0);
        pnumNode10 = (PNum)nodeArrayList9.get(0);
        tryNode11 = (TRy)nodeArrayList10.get(0);
        tigNode12 = (TIg)nodeArrayList11.get(0);
        pnumNode13 = (PNum)nodeArrayList12.get(0);

        pe0Node1 = new AE0(tcxNode2, tigNode3, pnumNode4, tcyNode5, tigNode6, pnumNode7, trxNode8, tigNode9, pnumNode10, tryNode11, tigNode12, pnumNode13);
        }
	nodeList.add(pe0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ANum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNum pnumNode1;
        {
            // Block
        TCo tcoNode2;
        TN tnNode3;
        TCo tcoNode4;
        tcoNode2 = (TCo)nodeArrayList1.get(0);
        tnNode3 = (TN)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);

        pnumNode1 = new ANum(tcoNode2, tnNode3, tcoNode4);
        }
	nodeList.add(pnumNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PAtt pattNode2;
        PP3 pp3Node3;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pp3Node3 = (PP3)nodeArrayList2.get(0);

        ppNode1 = new AAP(pattNode2, pp3Node3);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ABP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PP3 pp3Node2;
        PAtt pattNode3;
        pp3Node2 = (PP3)nodeArrayList1.get(0);
        pattNode3 = (PAtt)nodeArrayList2.get(0);

        ppNode1 = new ABP(pp3Node2, pattNode3);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ACP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PAtt pattNode2;
        PP3 pp3Node3;
        PAtt pattNode4;
        pattNode2 = (PAtt)nodeArrayList1.get(0);
        pp3Node3 = (PP3)nodeArrayList2.get(0);
        pattNode4 = (PAtt)nodeArrayList3.get(0);

        ppNode1 = new ACP(pattNode2, pp3Node3, pattNode4);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AP3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP3 pp3Node1;
        {
            // Block
        TPoints tpointsNode2;
        TIg tigNode3;
        TCo tcoNode4;
        PP0 pp0Node5;
        TCo tcoNode6;
        tpointsNode2 = (TPoints)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        pp0Node5 = (PP0)nodeArrayList4.get(0);
        tcoNode6 = (TCo)nodeArrayList5.get(0);

        pp3Node1 = new AP3(tpointsNode2, tigNode3, tcoNode4, pp0Node5, tcoNode6);
        }
	nodeList.add(pp3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAP0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP0 pp0Node1;
        {
            // Block
        PP1 pp1Node2;
        pp1Node2 = (PP1)nodeArrayList1.get(0);

        pp0Node1 = new AAP0(pp1Node2);
        }
	nodeList.add(pp0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ABP0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP0 pp0Node1;
        {
            // Block
        PP0 pp0Node2;
        PP1 pp1Node3;
        pp0Node2 = (PP0)nodeArrayList1.get(0);
        pp1Node3 = (PP1)nodeArrayList2.get(0);

        pp0Node1 = new ABP0(pp0Node2, pp1Node3);
        }
	nodeList.add(pp0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AP1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP1 pp1Node1;
        {
            // Block
        TN tnNode2;
        TComa tcomaNode3;
        TN tnNode4;
        tnNode2 = (TN)nodeArrayList1.get(0);
        tcomaNode3 = (TComa)nodeArrayList2.get(0);
        tnNode4 = (TN)nodeArrayList3.get(0);

        pp1Node1 = new AP1(tnNode2, tcomaNode3, tnNode4);
        }
	nodeList.add(pp1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AS */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        {
            // Block
        TStyle tstyleNode2;
        TIg tigNode3;
        TCo tcoNode4;
        PSp pspNode5;
        TCo tcoNode6;
        tstyleNode2 = (TStyle)nodeArrayList1.get(0);
        tigNode3 = (TIg)nodeArrayList2.get(0);
        tcoNode4 = (TCo)nodeArrayList3.get(0);
        pspNode5 = (PSp)nodeArrayList4.get(0);
        tcoNode6 = (TCo)nodeArrayList5.get(0);

        psNode1 = new AS(tstyleNode2, tigNode3, tcoNode4, pspNode5, tcoNode6);
        }
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AASp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp pspNode1;
        {
            // Block
        PSp0 psp0Node2;
        psp0Node2 = (PSp0)nodeArrayList1.get(0);

        pspNode1 = new AASp(psp0Node2);
        }
	nodeList.add(pspNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ABSp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp pspNode1;
        {
            // Block
        PSp pspNode2;
        TPc tpcNode3;
        PSp0 psp0Node4;
        pspNode2 = (PSp)nodeArrayList1.get(0);
        tpcNode3 = (TPc)nodeArrayList2.get(0);
        psp0Node4 = (PSp0)nodeArrayList3.get(0);

        pspNode1 = new ABSp(pspNode2, tpcNode3, psp0Node4);
        }
	nodeList.add(pspNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AASp0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp0 psp0Node1;
        {
            // Block
        TFill tfillNode2;
        TDosp tdospNode3;
        TC0 tc0Node4;
        tfillNode2 = (TFill)nodeArrayList1.get(0);
        tdospNode3 = (TDosp)nodeArrayList2.get(0);
        tc0Node4 = (TC0)nodeArrayList3.get(0);

        psp0Node1 = new AASp0(tfillNode2, tdospNode3, tc0Node4);
        }
	nodeList.add(psp0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ABSp0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp0 psp0Node1;
        {
            // Block
        TStroke tstrokeNode2;
        TDosp tdospNode3;
        TC0 tc0Node4;
        tstrokeNode2 = (TStroke)nodeArrayList1.get(0);
        tdospNode3 = (TDosp)nodeArrayList2.get(0);
        tc0Node4 = (TC0)nodeArrayList3.get(0);

        psp0Node1 = new ABSp0(tstrokeNode2, tdospNode3, tc0Node4);
        }
	nodeList.add(psp0Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ACSp0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSp0 psp0Node1;
        {
            // Block
        TStrokew tstrokewNode2;
        TDosp tdospNode3;
        TN tnNode4;
        tstrokewNode2 = (TStrokew)nodeArrayList1.get(0);
        tdospNode3 = (TDosp)nodeArrayList2.get(0);
        tnNode4 = (TN)nodeArrayList3.get(0);

        psp0Node1 = new ACSp0(tstrokewNode2, tdospNode3, tnNode4);
        }
	nodeList.add(psp0Node1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, },
			{{-1, ERROR, 1}, {4, SHIFT, 3}, {23, SHIFT, 4}, },
			{{-1, ERROR, 2}, {36, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {3, SHIFT, 6}, },
			{{-1, ERROR, 4}, {6, SHIFT, 9}, },
			{{-1, ERROR, 5}, {4, SHIFT, 10}, },
			{{-1, ERROR, 6}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {13, SHIFT, 16}, {29, SHIFT, 17}, },
			{{-1, ERROR, 7}, {2, SHIFT, 20}, {3, SHIFT, 21}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 9}, {5, SHIFT, 24}, },
			{{-1, ERROR, 10}, {3, SHIFT, 6}, },
			{{-1, ERROR, 11}, {14, SHIFT, 27}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 12}, {18, SHIFT, 35}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 13}, {21, SHIFT, 39}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 14}, {18, SHIFT, 43}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 15}, {27, SHIFT, 47}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 16}, {27, SHIFT, 47}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 17}, {6, SHIFT, 52}, },
			{{-1, ERROR, 18}, {4, SHIFT, 53}, {7, SHIFT, 54}, {29, SHIFT, 17}, },
			{{-1, ERROR, 19}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {13, SHIFT, 16}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 21}, {7, SHIFT, 58}, {8, SHIFT, 11}, {9, SHIFT, 12}, {10, SHIFT, 13}, {11, SHIFT, 14}, {12, SHIFT, 15}, {13, SHIFT, 16}, {29, SHIFT, 17}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 24}, {0, SHIFT, 59}, },
			{{-1, ERROR, 25}, {24, SHIFT, 60}, },
			{{-1, ERROR, 26}, {2, SHIFT, 61}, {3, SHIFT, 21}, },
			{{-1, ERROR, 27}, {6, SHIFT, 62}, },
			{{-1, ERROR, 28}, {6, SHIFT, 63}, },
			{{-1, ERROR, 29}, {6, SHIFT, 64}, },
			{{-1, ERROR, 30}, {6, SHIFT, 65}, },
			{{-1, ERROR, 31}, {14, SHIFT, 27}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 32}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 35}, {6, SHIFT, 69}, },
			{{-1, ERROR, 36}, {18, SHIFT, 35}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 37}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 39}, {6, SHIFT, 72}, },
			{{-1, ERROR, 40}, {21, SHIFT, 39}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 42}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 43}, {6, SHIFT, 75}, },
			{{-1, ERROR, 44}, {18, SHIFT, 43}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 47}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 47}, {6, SHIFT, 78}, },
			{{-1, ERROR, 48}, {27, SHIFT, 47}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 50}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 52}, {5, SHIFT, 81}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 54}, {4, SHIFT, 82}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 56}, {4, SHIFT, 53}, {7, SHIFT, 54}, },
			{{-1, ERROR, 57}, {4, SHIFT, 53}, {7, SHIFT, 54}, },
			{{-1, ERROR, 58}, {8, SHIFT, 85}, {9, SHIFT, 86}, {10, SHIFT, 87}, {11, SHIFT, 88}, {12, SHIFT, 89}, {13, SHIFT, 90}, },
			{{-1, ERROR, 59}, {5, SHIFT, 92}, },
			{{-1, ERROR, 60}, {6, SHIFT, 93}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 62}, {5, SHIFT, 24}, },
			{{-1, ERROR, 63}, {5, SHIFT, 95}, },
			{{-1, ERROR, 64}, {5, SHIFT, 96}, },
			{{-1, ERROR, 65}, {5, SHIFT, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 29}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, REDUCE, 30}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 69}, {5, SHIFT, 24}, },
			{{-1, REDUCE, 34}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, REDUCE, 35}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 72}, {5, SHIFT, 24}, },
			{{-1, REDUCE, 39}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, REDUCE, 40}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 75}, {5, SHIFT, 24}, },
			{{-1, REDUCE, 44}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, REDUCE, 45}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 78}, {5, SHIFT, 105}, },
			{{-1, REDUCE, 50}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, REDUCE, 51}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 81}, {30, SHIFT, 107}, {31, SHIFT, 108}, {32, SHIFT, 109}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 91}, {4, SHIFT, 112}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 93}, {5, SHIFT, 24}, },
			{{-1, ERROR, 94}, {15, SHIFT, 114}, },
			{{-1, ERROR, 95}, {33, SHIFT, 115}, },
			{{-1, ERROR, 96}, {33, SHIFT, 116}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 31}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 99}, {19, SHIFT, 117}, },
			{{-1, REDUCE, 36}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 101}, {22, SHIFT, 118}, },
			{{-1, REDUCE, 41}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 103}, {19, SHIFT, 119}, },
			{{-1, REDUCE, 46}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 105}, {0, SHIFT, 120}, },
			{{-1, REDUCE, 52}, {30, SHIFT, 28}, {31, SHIFT, 29}, {32, SHIFT, 30}, },
			{{-1, ERROR, 107}, {35, SHIFT, 123}, },
			{{-1, ERROR, 108}, {35, SHIFT, 124}, },
			{{-1, ERROR, 109}, {35, SHIFT, 125}, },
			{{-1, ERROR, 110}, {5, SHIFT, 126}, {34, SHIFT, 127}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 114}, {6, SHIFT, 128}, },
			{{-1, ERROR, 115}, {5, SHIFT, 129}, },
			{{-1, ERROR, 116}, {5, SHIFT, 130}, },
			{{-1, ERROR, 117}, {6, SHIFT, 131}, },
			{{-1, ERROR, 118}, {6, SHIFT, 132}, },
			{{-1, ERROR, 119}, {6, SHIFT, 133}, },
			{{-1, ERROR, 120}, {28, SHIFT, 134}, },
			{{-1, ERROR, 121}, {0, SHIFT, 120}, {5, SHIFT, 135}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 123}, {33, SHIFT, 137}, },
			{{-1, ERROR, 124}, {33, SHIFT, 138}, },
			{{-1, ERROR, 125}, {0, SHIFT, 139}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 127}, {30, SHIFT, 107}, {31, SHIFT, 108}, {32, SHIFT, 109}, },
			{{-1, ERROR, 128}, {5, SHIFT, 24}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 131}, {5, SHIFT, 24}, },
			{{-1, ERROR, 132}, {5, SHIFT, 24}, },
			{{-1, ERROR, 133}, {5, SHIFT, 24}, },
			{{-1, ERROR, 134}, {0, SHIFT, 145}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 141}, {16, SHIFT, 146}, },
			{{-1, ERROR, 142}, {20, SHIFT, 147}, },
			{{-1, ERROR, 143}, {23, SHIFT, 148}, },
			{{-1, ERROR, 144}, {25, SHIFT, 149}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 146}, {6, SHIFT, 150}, },
			{{-1, ERROR, 147}, {6, SHIFT, 151}, },
			{{-1, ERROR, 148}, {6, SHIFT, 152}, },
			{{-1, ERROR, 149}, {6, SHIFT, 153}, },
			{{-1, ERROR, 150}, {5, SHIFT, 24}, },
			{{-1, ERROR, 151}, {5, SHIFT, 24}, },
			{{-1, ERROR, 152}, {5, SHIFT, 24}, },
			{{-1, ERROR, 153}, {5, SHIFT, 24}, },
			{{-1, ERROR, 154}, {17, SHIFT, 158}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 156}, {24, SHIFT, 159}, },
			{{-1, ERROR, 157}, {26, SHIFT, 160}, },
			{{-1, ERROR, 158}, {6, SHIFT, 161}, },
			{{-1, ERROR, 159}, {6, SHIFT, 162}, },
			{{-1, ERROR, 160}, {6, SHIFT, 163}, },
			{{-1, ERROR, 161}, {5, SHIFT, 24}, },
			{{-1, ERROR, 162}, {5, SHIFT, 24}, },
			{{-1, ERROR, 163}, {5, SHIFT, 24}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 48}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 5}, },
			{{-1, 7}, {10, 26}, },
			{{-1, 8}, {7, 22}, {26, 22}, },
			{{-1, 55}, {56, 83}, {57, 84}, },
			{{-1, 23}, },
			{{-1, 91}, },
			{{-1, 18}, {19, 57}, },
			{{-1, 48}, {11, 31}, {12, 36}, {13, 40}, {14, 44}, {34, 68}, {38, 71}, {42, 74}, {46, 77}, {50, 80}, {67, 98}, {70, 100}, {73, 102}, {76, 104}, {79, 106}, },
			{{-1, 32}, {31, 66}, {36, 66}, {40, 66}, {44, 66}, {48, 66}, {68, 66}, {71, 66}, {74, 66}, {77, 66}, {80, 66}, {98, 66}, {100, 66}, {102, 66}, {104, 66}, {106, 66}, },
			{{-1, 33}, },
			{{-1, 34}, {31, 67}, },
			{{-1, 37}, },
			{{-1, 38}, {36, 70}, },
			{{-1, 41}, },
			{{-1, 42}, {40, 73}, },
			{{-1, 45}, },
			{{-1, 46}, {44, 76}, },
			{{-1, 25}, {62, 94}, {65, 97}, {69, 99}, {72, 101}, {75, 103}, {93, 113}, {128, 141}, {131, 142}, {132, 143}, {133, 144}, {150, 154}, {151, 155}, {152, 156}, {153, 157}, {161, 164}, {162, 165}, {163, 166}, },
			{{-1, 49}, {16, 51}, },
			{{-1, 50}, {48, 79}, },
			{{-1, 121}, },
			{{-1, 122}, {121, 136}, },
			{{-1, 19}, {18, 56}, },
			{{-1, 110}, },
			{{-1, 111}, {127, 140}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: '<svg'",
			"expecting: '>', 'width'",
			"expecting: EOF",
			"expecting: '<'",
			"expecting: '='",
			"expecting: '>'",
			"expecting: 'line', 'circle', 'rect', 'ellipse', 'polygon', 'polyline', 'style'",
			"expecting: '</svg>', '<'",
			"expecting: '"'",
			"expecting: 'x1', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'cx', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'x', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'points', 'fill', 'stroke', 'stroke-width'",
			"expecting: '>', '/', 'style'",
			"expecting: 'line', 'circle', 'rect', 'ellipse', 'polygon', 'polyline'",
			"expecting: '/', 'line', 'circle', 'rect', 'ellipse', 'polygon', 'polyline', 'style'",
			"expecting: n",
			"expecting: 'height'",
			"expecting: '>', '/', 'x1', 'cx', 'x', 'points', 'style', 'fill', 'stroke', 'stroke-width'",
			"expecting: '>', '/', 'style', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'fill', 'stroke', 'stroke-width'",
			"expecting: '>', '/'",
			"expecting: '>', '/', 'x1', 'y1', 'x2', 'y2', 'cx', 'cy', 'r', 'x', 'y', 'width', 'height', 'rx', 'ry', 'points', 'style', 'fill', 'stroke', 'stroke-width'",
			"expecting: 'y1'",
			"expecting: c0",
			"expecting: 'cy'",
			"expecting: 'y'",
			"expecting: ':'",
			"expecting: '"', ';'",
			"expecting: ','",
			"expecting: n, '"'",
			"expecting: '>', '/', 'line', 'circle', 'rect', 'ellipse', 'polygon', 'polyline'",
			"expecting: 'x2'",
			"expecting: 'r'",
			"expecting: 'width'",
			"expecting: 'rx'",
			"expecting: 'y2'",
			"expecting: 'ry'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 3, 9, 10, 11, 10, 12, 12, 4, 13, 14, 2, 15, 7, 7, 16, 17, 7, 4, 4, 4, 4, 9, 18, 13, 19, 4, 10, 13, 19, 4, 11, 13, 19, 4, 10, 13, 19, 4, 12, 13, 20, 13, 8, 7, 5, 7, 21, 21, 14, 8, 4, 2, 8, 8, 8, 8, 18, 19, 19, 8, 19, 19, 8, 19, 19, 8, 19, 19, 8, 19, 19, 20, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 22, 8, 23, 24, 24, 18, 19, 25, 19, 26, 19, 25, 19, 16, 19, 27, 27, 27, 28, 28, 7, 5, 4, 8, 8, 4, 4, 4, 29, 30, 30, 24, 24, 16, 31, 20, 8, 18, 18, 8, 8, 8, 16, 19, 30, 28, 28, 28, 28, 32, 33, 34, 35, 30, 4, 4, 4, 4, 8, 8, 8, 8, 36, 19, 17, 37, 4, 4, 4, 8, 8, 8, 19, 19, 19, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.analysis;

import java.util.*;
import postfix.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAStart(node);
    }

    public void inAUnaFiguraExp(AUnaFiguraExp node)
    {
        defaultIn(node);
    }

    public void outAUnaFiguraExp(AUnaFiguraExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaFiguraExp(AUnaFiguraExp node)
    {
        inAUnaFiguraExp(node);
        if(node.getPr1() != null)
        {
            node.getPr1().apply(this);
        }
        outAUnaFiguraExp(node);
    }

    public void inAConcatenarFiguraExp(AConcatenarFiguraExp node)
    {
        defaultIn(node);
    }

    public void outAConcatenarFiguraExp(AConcatenarFiguraExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcatenarFiguraExp(AConcatenarFiguraExp node)
    {
        inAConcatenarFiguraExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getPr1() != null)
        {
            node.getPr1().apply(this);
        }
        outAConcatenarFiguraExp(node);
    }

    public void inAAPr1(AAPr1 node)
    {
        defaultIn(node);
    }

    public void outAAPr1(AAPr1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPr1(AAPr1 node)
    {
        inAAPr1(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        if(node.getS() != null)
        {
            node.getS().apply(this);
        }
        if(node.getMayus0() != null)
        {
            node.getMayus0().apply(this);
        }
        outAAPr1(node);
    }

    public void inABPr1(ABPr1 node)
    {
        defaultIn(node);
    }

    public void outABPr1(ABPr1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABPr1(ABPr1 node)
    {
        inABPr1(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        if(node.getMayus0() != null)
        {
            node.getMayus0().apply(this);
        }
        outABPr1(node);
    }

    public void inACPr1(ACPr1 node)
    {
        defaultIn(node);
    }

    public void outACPr1(ACPr1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACPr1(ACPr1 node)
    {
        inACPr1(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getS() != null)
        {
            node.getS().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        if(node.getMayus0() != null)
        {
            node.getMayus0().apply(this);
        }
        outACPr1(node);
    }

    public void inAAMayus0(AAMayus0 node)
    {
        defaultIn(node);
    }

    public void outAAMayus0(AAMayus0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMayus0(AAMayus0 node)
    {
        inAAMayus0(node);
        if(node.getMayus() != null)
        {
            node.getMayus().apply(this);
        }
        outAAMayus0(node);
    }

    public void inABMayus0(ABMayus0 node)
    {
        defaultIn(node);
    }

    public void outABMayus0(ABMayus0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABMayus0(ABMayus0 node)
    {
        inABMayus0(node);
        if(node.getSl() != null)
        {
            node.getSl().apply(this);
        }
        if(node.getMayus() != null)
        {
            node.getMayus().apply(this);
        }
        outABMayus0(node);
    }

    public void inAFinFigura(AFinFigura node)
    {
        defaultIn(node);
    }

    public void outAFinFigura(AFinFigura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFinFigura(AFinFigura node)
    {
        inAFinFigura(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getSl() != null)
        {
            node.getSl().apply(this);
        }
        if(node.getNombreFigura() != null)
        {
            node.getNombreFigura().apply(this);
        }
        if(node.getMayus() != null)
        {
            node.getMayus().apply(this);
        }
        outAFinFigura(node);
    }

    public void inAANombreFigura(AANombreFigura node)
    {
        defaultIn(node);
    }

    public void outAANombreFigura(AANombreFigura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANombreFigura(AANombreFigura node)
    {
        inAANombreFigura(node);
        if(node.getLine() != null)
        {
            node.getLine().apply(this);
        }
        outAANombreFigura(node);
    }

    public void inABNombreFigura(ABNombreFigura node)
    {
        defaultIn(node);
    }

    public void outABNombreFigura(ABNombreFigura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABNombreFigura(ABNombreFigura node)
    {
        inABNombreFigura(node);
        if(node.getCircle() != null)
        {
            node.getCircle().apply(this);
        }
        outABNombreFigura(node);
    }

    public void inACNombreFigura(ACNombreFigura node)
    {
        defaultIn(node);
    }

    public void outACNombreFigura(ACNombreFigura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACNombreFigura(ACNombreFigura node)
    {
        inACNombreFigura(node);
        if(node.getRect() != null)
        {
            node.getRect().apply(this);
        }
        outACNombreFigura(node);
    }

    public void inADNombreFigura(ADNombreFigura node)
    {
        defaultIn(node);
    }

    public void outADNombreFigura(ADNombreFigura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADNombreFigura(ADNombreFigura node)
    {
        inADNombreFigura(node);
        if(node.getEllipse() != null)
        {
            node.getEllipse().apply(this);
        }
        outADNombreFigura(node);
    }

    public void inAENombreFigura(AENombreFigura node)
    {
        defaultIn(node);
    }

    public void outAENombreFigura(AENombreFigura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAENombreFigura(AENombreFigura node)
    {
        inAENombreFigura(node);
        if(node.getPolygon() != null)
        {
            node.getPolygon().apply(this);
        }
        outAENombreFigura(node);
    }

    public void inAFNombreFigura(AFNombreFigura node)
    {
        defaultIn(node);
    }

    public void outAFNombreFigura(AFNombreFigura node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFNombreFigura(AFNombreFigura node)
    {
        inAFNombreFigura(node);
        if(node.getPolyline() != null)
        {
            node.getPolyline().apply(this);
        }
        outAFNombreFigura(node);
    }

    public void inAAF(AAF node)
    {
        defaultIn(node);
    }

    public void outAAF(AAF node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAF(AAF node)
    {
        inAAF(node);
        if(node.getLine() != null)
        {
            node.getLine().apply(this);
        }
        if(node.getL1() != null)
        {
            node.getL1().apply(this);
        }
        outAAF(node);
    }

    public void inABF(ABF node)
    {
        defaultIn(node);
    }

    public void outABF(ABF node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABF(ABF node)
    {
        inABF(node);
        if(node.getCircle() != null)
        {
            node.getCircle().apply(this);
        }
        if(node.getC1() != null)
        {
            node.getC1().apply(this);
        }
        outABF(node);
    }

    public void inACF(ACF node)
    {
        defaultIn(node);
    }

    public void outACF(ACF node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACF(ACF node)
    {
        inACF(node);
        if(node.getRect() != null)
        {
            node.getRect().apply(this);
        }
        if(node.getR1() != null)
        {
            node.getR1().apply(this);
        }
        outACF(node);
    }

    public void inADF(ADF node)
    {
        defaultIn(node);
    }

    public void outADF(ADF node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADF(ADF node)
    {
        inADF(node);
        if(node.getEllipse() != null)
        {
            node.getEllipse().apply(this);
        }
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        outADF(node);
    }

    public void inAEF(AEF node)
    {
        defaultIn(node);
    }

    public void outAEF(AEF node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEF(AEF node)
    {
        inAEF(node);
        if(node.getPolygon() != null)
        {
            node.getPolygon().apply(this);
        }
        if(node.getP() != null)
        {
            node.getP().apply(this);
        }
        outAEF(node);
    }

    public void inAFF(AFF node)
    {
        defaultIn(node);
    }

    public void outAFF(AFF node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFF(AFF node)
    {
        inAFF(node);
        if(node.getPolyline() != null)
        {
            node.getPolyline().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAFF(node);
    }

    public void inAAAtt(AAAtt node)
    {
        defaultIn(node);
    }

    public void outAAAtt(AAAtt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAtt(AAAtt node)
    {
        inAAAtt(node);
        if(node.getAtt0() != null)
        {
            node.getAtt0().apply(this);
        }
        outAAAtt(node);
    }

    public void inABAtt(ABAtt node)
    {
        defaultIn(node);
    }

    public void outABAtt(ABAtt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABAtt(ABAtt node)
    {
        inABAtt(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getAtt0() != null)
        {
            node.getAtt0().apply(this);
        }
        outABAtt(node);
    }

    public void inAAAtt0(AAAtt0 node)
    {
        defaultIn(node);
    }

    public void outAAAtt0(AAAtt0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAtt0(AAAtt0 node)
    {
        inAAAtt0(node);
        if(node.getFill() != null)
        {
            node.getFill().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAAAtt0(node);
    }

    public void inABAtt0(ABAtt0 node)
    {
        defaultIn(node);
    }

    public void outABAtt0(ABAtt0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABAtt0(ABAtt0 node)
    {
        inABAtt0(node);
        if(node.getStroke() != null)
        {
            node.getStroke().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outABAtt0(node);
    }

    public void inACAtt0(ACAtt0 node)
    {
        defaultIn(node);
    }

    public void outACAtt0(ACAtt0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACAtt0(ACAtt0 node)
    {
        inACAtt0(node);
        if(node.getStrokew() != null)
        {
            node.getStrokew().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outACAtt0(node);
    }

    public void inAAL1(AAL1 node)
    {
        defaultIn(node);
    }

    public void outAAL1(AAL1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAL1(AAL1 node)
    {
        inAAL1(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getL0() != null)
        {
            node.getL0().apply(this);
        }
        outAAL1(node);
    }

    public void inABL1(ABL1 node)
    {
        defaultIn(node);
    }

    public void outABL1(ABL1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABL1(ABL1 node)
    {
        inABL1(node);
        if(node.getL0() != null)
        {
            node.getL0().apply(this);
        }
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        outABL1(node);
    }

    public void inACL1(ACL1 node)
    {
        defaultIn(node);
    }

    public void outACL1(ACL1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACL1(ACL1 node)
    {
        inACL1(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getL0() != null)
        {
            node.getL0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outACL1(node);
    }

    public void inADL1(ADL1 node)
    {
        defaultIn(node);
    }

    public void outADL1(ADL1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADL1(ADL1 node)
    {
        inADL1(node);
        if(node.getL0() != null)
        {
            node.getL0().apply(this);
        }
        outADL1(node);
    }

    public void inAL0(AL0 node)
    {
        defaultIn(node);
    }

    public void outAL0(AL0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAL0(AL0 node)
    {
        inAL0(node);
        if(node.getCoorx() != null)
        {
            node.getCoorx().apply(this);
        }
        if(node.getCoory() != null)
        {
            node.getCoory().apply(this);
        }
        if(node.getCoorx2() != null)
        {
            node.getCoorx2().apply(this);
        }
        if(node.getCoory2() != null)
        {
            node.getCoory2().apply(this);
        }
        outAL0(node);
    }

    public void inAAC1(AAC1 node)
    {
        defaultIn(node);
    }

    public void outAAC1(AAC1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAC1(AAC1 node)
    {
        inAAC1(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        outAAC1(node);
    }

    public void inABC1(ABC1 node)
    {
        defaultIn(node);
    }

    public void outABC1(ABC1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABC1(ABC1 node)
    {
        inABC1(node);
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        outABC1(node);
    }

    public void inACC1(ACC1 node)
    {
        defaultIn(node);
    }

    public void outACC1(ACC1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACC1(ACC1 node)
    {
        inACC1(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outACC1(node);
    }

    public void inADC1(ADC1 node)
    {
        defaultIn(node);
    }

    public void outADC1(ADC1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADC1(ADC1 node)
    {
        inADC1(node);
        if(node.getC2() != null)
        {
            node.getC2().apply(this);
        }
        outADC1(node);
    }

    public void inAC2(AC2 node)
    {
        defaultIn(node);
    }

    public void outAC2(AC2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAC2(AC2 node)
    {
        inAC2(node);
        if(node.getCoorcx() != null)
        {
            node.getCoorcx().apply(this);
        }
        if(node.getCoorcy() != null)
        {
            node.getCoorcy().apply(this);
        }
        if(node.getRad() != null)
        {
            node.getRad().apply(this);
        }
        outAC2(node);
    }

    public void inAAR1(AAR1 node)
    {
        defaultIn(node);
    }

    public void outAAR1(AAR1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAR1(AAR1 node)
    {
        inAAR1(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getR2() != null)
        {
            node.getR2().apply(this);
        }
        outAAR1(node);
    }

    public void inABR1(ABR1 node)
    {
        defaultIn(node);
    }

    public void outABR1(ABR1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABR1(ABR1 node)
    {
        inABR1(node);
        if(node.getR2() != null)
        {
            node.getR2().apply(this);
        }
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        outABR1(node);
    }

    public void inACR1(ACR1 node)
    {
        defaultIn(node);
    }

    public void outACR1(ACR1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACR1(ACR1 node)
    {
        inACR1(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getR2() != null)
        {
            node.getR2().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outACR1(node);
    }

    public void inADR1(ADR1 node)
    {
        defaultIn(node);
    }

    public void outADR1(ADR1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADR1(ADR1 node)
    {
        inADR1(node);
        if(node.getR2() != null)
        {
            node.getR2().apply(this);
        }
        outADR1(node);
    }

    public void inAR2(AR2 node)
    {
        defaultIn(node);
    }

    public void outAR2(AR2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAR2(AR2 node)
    {
        inAR2(node);
        if(node.getCoory0() != null)
        {
            node.getCoory0().apply(this);
        }
        if(node.getWid() != null)
        {
            node.getWid().apply(this);
        }
        if(node.getHei() != null)
        {
            node.getHei().apply(this);
        }
        outAR2(node);
    }

    public void inAAE1(AAE1 node)
    {
        defaultIn(node);
    }

    public void outAAE1(AAE1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAE1(AAE1 node)
    {
        inAAE1(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getE0() != null)
        {
            node.getE0().apply(this);
        }
        outAAE1(node);
    }

    public void inABE1(ABE1 node)
    {
        defaultIn(node);
    }

    public void outABE1(ABE1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABE1(ABE1 node)
    {
        inABE1(node);
        if(node.getE0() != null)
        {
            node.getE0().apply(this);
        }
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        outABE1(node);
    }

    public void inACE1(ACE1 node)
    {
        defaultIn(node);
    }

    public void outACE1(ACE1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACE1(ACE1 node)
    {
        inACE1(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getE0() != null)
        {
            node.getE0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outACE1(node);
    }

    public void inADE1(ADE1 node)
    {
        defaultIn(node);
    }

    public void outADE1(ADE1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADE1(ADE1 node)
    {
        inADE1(node);
        if(node.getE0() != null)
        {
            node.getE0().apply(this);
        }
        outADE1(node);
    }

    public void inAE0(AE0 node)
    {
        defaultIn(node);
    }

    public void outAE0(AE0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE0(AE0 node)
    {
        inAE0(node);
        if(node.getCoorcx() != null)
        {
            node.getCoorcx().apply(this);
        }
        if(node.getCoorcy() != null)
        {
            node.getCoorcy().apply(this);
        }
        if(node.getRadx() != null)
        {
            node.getRadx().apply(this);
        }
        if(node.getRady() != null)
        {
            node.getRady().apply(this);
        }
        outAE0(node);
    }

    public void inACoorx(ACoorx node)
    {
        defaultIn(node);
    }

    public void outACoorx(ACoorx node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACoorx(ACoorx node)
    {
        inACoorx(node);
        if(node.getX1() != null)
        {
            node.getX1().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outACoorx(node);
    }

    public void inACoory(ACoory node)
    {
        defaultIn(node);
    }

    public void outACoory(ACoory node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACoory(ACoory node)
    {
        inACoory(node);
        if(node.getY1() != null)
        {
            node.getY1().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outACoory(node);
    }

    public void inACoorx2(ACoorx2 node)
    {
        defaultIn(node);
    }

    public void outACoorx2(ACoorx2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACoorx2(ACoorx2 node)
    {
        inACoorx2(node);
        if(node.getX2() != null)
        {
            node.getX2().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outACoorx2(node);
    }

    public void inACoory2(ACoory2 node)
    {
        defaultIn(node);
    }

    public void outACoory2(ACoory2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACoory2(ACoory2 node)
    {
        inACoory2(node);
        if(node.getY2() != null)
        {
            node.getY2().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outACoory2(node);
    }

    public void inACoorcx(ACoorcx node)
    {
        defaultIn(node);
    }

    public void outACoorcx(ACoorcx node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACoorcx(ACoorcx node)
    {
        inACoorcx(node);
        if(node.getCx() != null)
        {
            node.getCx().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outACoorcx(node);
    }

    public void inACoorcy(ACoorcy node)
    {
        defaultIn(node);
    }

    public void outACoorcy(ACoorcy node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACoorcy(ACoorcy node)
    {
        inACoorcy(node);
        if(node.getCy() != null)
        {
            node.getCy().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outACoorcy(node);
    }

    public void inARad(ARad node)
    {
        defaultIn(node);
    }

    public void outARad(ARad node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARad(ARad node)
    {
        inARad(node);
        if(node.getR0() != null)
        {
            node.getR0().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outARad(node);
    }

    public void inACoorx0(ACoorx0 node)
    {
        defaultIn(node);
    }

    public void outACoorx0(ACoorx0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACoorx0(ACoorx0 node)
    {
        inACoorx0(node);
        if(node.getX0() != null)
        {
            node.getX0().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outACoorx0(node);
    }

    public void inACoory0(ACoory0 node)
    {
        defaultIn(node);
    }

    public void outACoory0(ACoory0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACoory0(ACoory0 node)
    {
        inACoory0(node);
        if(node.getY0() != null)
        {
            node.getY0().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outACoory0(node);
    }

    public void inAWid(AWid node)
    {
        defaultIn(node);
    }

    public void outAWid(AWid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWid(AWid node)
    {
        inAWid(node);
        if(node.getWidth() != null)
        {
            node.getWidth().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outAWid(node);
    }

    public void inAHei(AHei node)
    {
        defaultIn(node);
    }

    public void outAHei(AHei node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHei(AHei node)
    {
        inAHei(node);
        if(node.getHeight() != null)
        {
            node.getHeight().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outAHei(node);
    }

    public void inARadx(ARadx node)
    {
        defaultIn(node);
    }

    public void outARadx(ARadx node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARadx(ARadx node)
    {
        inARadx(node);
        if(node.getRx() != null)
        {
            node.getRx().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outARadx(node);
    }

    public void inARady(ARady node)
    {
        defaultIn(node);
    }

    public void outARady(ARady node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARady(ARady node)
    {
        inARady(node);
        if(node.getRy() != null)
        {
            node.getRy().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outARady(node);
    }

    public void inANum(ANum node)
    {
        defaultIn(node);
    }

    public void outANum(ANum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANum(ANum node)
    {
        inANum(node);
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getN() != null)
        {
            node.getN().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        outANum(node);
    }

    public void inAAP(AAP node)
    {
        defaultIn(node);
    }

    public void outAAP(AAP node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAP(AAP node)
    {
        inAAP(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getP3() != null)
        {
            node.getP3().apply(this);
        }
        outAAP(node);
    }

    public void inABP(ABP node)
    {
        defaultIn(node);
    }

    public void outABP(ABP node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABP(ABP node)
    {
        inABP(node);
        if(node.getP3() != null)
        {
            node.getP3().apply(this);
        }
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        outABP(node);
    }

    public void inACP(ACP node)
    {
        defaultIn(node);
    }

    public void outACP(ACP node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACP(ACP node)
    {
        inACP(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getP3() != null)
        {
            node.getP3().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outACP(node);
    }

    public void inAP3(AP3 node)
    {
        defaultIn(node);
    }

    public void outAP3(AP3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP3(AP3 node)
    {
        inAP3(node);
        if(node.getPoints() != null)
        {
            node.getPoints().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getP0() != null)
        {
            node.getP0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAP3(node);
    }

    public void inAAP0(AAP0 node)
    {
        defaultIn(node);
    }

    public void outAAP0(AAP0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAP0(AAP0 node)
    {
        inAAP0(node);
        if(node.getP1() != null)
        {
            node.getP1().apply(this);
        }
        outAAP0(node);
    }

    public void inABP0(ABP0 node)
    {
        defaultIn(node);
    }

    public void outABP0(ABP0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABP0(ABP0 node)
    {
        inABP0(node);
        if(node.getP0() != null)
        {
            node.getP0().apply(this);
        }
        if(node.getP1() != null)
        {
            node.getP1().apply(this);
        }
        outABP0(node);
    }

    public void inAP1(AP1 node)
    {
        defaultIn(node);
    }

    public void outAP1(AP1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP1(AP1 node)
    {
        inAP1(node);
        if(node.getN() != null)
        {
            node.getN().apply(this);
        }
        if(node.getComa() != null)
        {
            node.getComa().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAP1(node);
    }

    public void inAS(AS node)
    {
        defaultIn(node);
    }

    public void outAS(AS node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAS(AS node)
    {
        inAS(node);
        if(node.getStyle() != null)
        {
            node.getStyle().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getSp() != null)
        {
            node.getSp().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAS(node);
    }

    public void inAASp(AASp node)
    {
        defaultIn(node);
    }

    public void outAASp(AASp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASp(AASp node)
    {
        inAASp(node);
        if(node.getSp0() != null)
        {
            node.getSp0().apply(this);
        }
        outAASp(node);
    }

    public void inABSp(ABSp node)
    {
        defaultIn(node);
    }

    public void outABSp(ABSp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABSp(ABSp node)
    {
        inABSp(node);
        if(node.getSp() != null)
        {
            node.getSp().apply(this);
        }
        if(node.getPc() != null)
        {
            node.getPc().apply(this);
        }
        if(node.getSp0() != null)
        {
            node.getSp0().apply(this);
        }
        outABSp(node);
    }

    public void inAASp0(AASp0 node)
    {
        defaultIn(node);
    }

    public void outAASp0(AASp0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASp0(AASp0 node)
    {
        inAASp0(node);
        if(node.getFill() != null)
        {
            node.getFill().apply(this);
        }
        if(node.getDosp() != null)
        {
            node.getDosp().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        outAASp0(node);
    }

    public void inABSp0(ABSp0 node)
    {
        defaultIn(node);
    }

    public void outABSp0(ABSp0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABSp0(ABSp0 node)
    {
        inABSp0(node);
        if(node.getStroke() != null)
        {
            node.getStroke().apply(this);
        }
        if(node.getDosp() != null)
        {
            node.getDosp().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        outABSp0(node);
    }

    public void inACSp0(ACSp0 node)
    {
        defaultIn(node);
    }

    public void outACSp0(ACSp0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACSp0(ACSp0 node)
    {
        inACSp0(node);
        if(node.getStrokew() != null)
        {
            node.getStrokew().apply(this);
        }
        if(node.getDosp() != null)
        {
            node.getDosp().apply(this);
        }
        if(node.getN() != null)
        {
            node.getN().apply(this);
        }
        outACSp0(node);
    }
}

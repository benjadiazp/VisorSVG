/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.analysis;

import java.util.*;
import postfix.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getSvg1() != null)
        {
            node.getSvg1().apply(this);
        }
        if(node.getPr() != null)
        {
            node.getPr().apply(this);
        }
        if(node.getSvg2() != null)
        {
            node.getSvg2().apply(this);
        }
        outAStart(node);
    }

    public void inAAPr(AAPr node)
    {
        defaultIn(node);
    }

    public void outAAPr(AAPr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPr(AAPr node)
    {
        inAAPr(node);
        if(node.getPr1() != null)
        {
            node.getPr1().apply(this);
        }
        outAAPr(node);
    }

    public void inABPr(ABPr node)
    {
        defaultIn(node);
    }

    public void outABPr(ABPr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABPr(ABPr node)
    {
        inABPr(node);
        if(node.getPr() != null)
        {
            node.getPr().apply(this);
        }
        if(node.getPr1() != null)
        {
            node.getPr1().apply(this);
        }
        outABPr(node);
    }

    public void inAAPr1(AAPr1 node)
    {
        defaultIn(node);
    }

    public void outAAPr1(AAPr1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPr1(AAPr1 node)
    {
        inAAPr1(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        if(node.getS() != null)
        {
            node.getS().apply(this);
        }
        if(node.getMayus() != null)
        {
            node.getMayus().apply(this);
        }
        outAAPr1(node);
    }

    public void inABPr1(ABPr1 node)
    {
        defaultIn(node);
    }

    public void outABPr1(ABPr1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABPr1(ABPr1 node)
    {
        inABPr1(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        if(node.getMayus() != null)
        {
            node.getMayus().apply(this);
        }
        outABPr1(node);
    }

    public void inAAF(AAF node)
    {
        defaultIn(node);
    }

    public void outAAF(AAF node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAF(AAF node)
    {
        inAAF(node);
        if(node.getD() != null)
        {
            node.getD().apply(this);
        }
        outAAF(node);
    }

    public void inABF(ABF node)
    {
        defaultIn(node);
    }

    public void outABF(ABF node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABF(ABF node)
    {
        inABF(node);
        if(node.getD() != null)
        {
            node.getD().apply(this);
        }
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        outABF(node);
    }

    public void inACF(ACF node)
    {
        defaultIn(node);
    }

    public void outACF(ACF node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACF(ACF node)
    {
        inACF(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getD() != null)
        {
            node.getD().apply(this);
        }
        outACF(node);
    }

    public void inADF(ADF node)
    {
        defaultIn(node);
    }

    public void outADF(ADF node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADF(ADF node)
    {
        inADF(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getD() != null)
        {
            node.getD().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outADF(node);
    }

    public void inAAD(AAD node)
    {
        defaultIn(node);
    }

    public void outAAD(AAD node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAD(AAD node)
    {
        inAAD(node);
        if(node.getLine() != null)
        {
            node.getLine().apply(this);
        }
        if(node.getL1() != null)
        {
            node.getL1().apply(this);
        }
        outAAD(node);
    }

    public void inABD(ABD node)
    {
        defaultIn(node);
    }

    public void outABD(ABD node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABD(ABD node)
    {
        inABD(node);
        if(node.getCircle() != null)
        {
            node.getCircle().apply(this);
        }
        if(node.getC1() != null)
        {
            node.getC1().apply(this);
        }
        outABD(node);
    }

    public void inACD(ACD node)
    {
        defaultIn(node);
    }

    public void outACD(ACD node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACD(ACD node)
    {
        inACD(node);
        if(node.getRect() != null)
        {
            node.getRect().apply(this);
        }
        if(node.getR1() != null)
        {
            node.getR1().apply(this);
        }
        outACD(node);
    }

    public void inADD(ADD node)
    {
        defaultIn(node);
    }

    public void outADD(ADD node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADD(ADD node)
    {
        inADD(node);
        if(node.getEllipse() != null)
        {
            node.getEllipse().apply(this);
        }
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        outADD(node);
    }

    public void inAED(AED node)
    {
        defaultIn(node);
    }

    public void outAED(AED node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAED(AED node)
    {
        inAED(node);
        if(node.getPolygon() != null)
        {
            node.getPolygon().apply(this);
        }
        if(node.getP() != null)
        {
            node.getP().apply(this);
        }
        outAED(node);
    }

    public void inAFD(AFD node)
    {
        defaultIn(node);
    }

    public void outAFD(AFD node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFD(AFD node)
    {
        inAFD(node);
        if(node.getPolyline() != null)
        {
            node.getPolyline().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAFD(node);
    }

    public void inAAAtt(AAAtt node)
    {
        defaultIn(node);
    }

    public void outAAAtt(AAAtt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAtt(AAAtt node)
    {
        inAAAtt(node);
        if(node.getAtt0() != null)
        {
            node.getAtt0().apply(this);
        }
        outAAAtt(node);
    }

    public void inABAtt(ABAtt node)
    {
        defaultIn(node);
    }

    public void outABAtt(ABAtt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABAtt(ABAtt node)
    {
        inABAtt(node);
        if(node.getAtt() != null)
        {
            node.getAtt().apply(this);
        }
        if(node.getAtt0() != null)
        {
            node.getAtt0().apply(this);
        }
        outABAtt(node);
    }

    public void inAAAtt0(AAAtt0 node)
    {
        defaultIn(node);
    }

    public void outAAAtt0(AAAtt0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAtt0(AAAtt0 node)
    {
        inAAAtt0(node);
        if(node.getFill() != null)
        {
            node.getFill().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAAAtt0(node);
    }

    public void inABAtt0(ABAtt0 node)
    {
        defaultIn(node);
    }

    public void outABAtt0(ABAtt0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABAtt0(ABAtt0 node)
    {
        inABAtt0(node);
        if(node.getStroke() != null)
        {
            node.getStroke().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outABAtt0(node);
    }

    public void inACAtt0(ACAtt0 node)
    {
        defaultIn(node);
    }

    public void outACAtt0(ACAtt0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACAtt0(ACAtt0 node)
    {
        inACAtt0(node);
        if(node.getStrokew() != null)
        {
            node.getStrokew().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outACAtt0(node);
    }

    public void inAL1(AL1 node)
    {
        defaultIn(node);
    }

    public void outAL1(AL1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAL1(AL1 node)
    {
        inAL1(node);
        if(node.getX1() != null)
        {
            node.getX1().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getY1() != null)
        {
            node.getY1().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getX2() != null)
        {
            node.getX2().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getD() != null)
        {
            node.getD().apply(this);
        }
        if(node.getY2() != null)
        {
            node.getY2().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        outAL1(node);
    }

    public void inAC1(AC1 node)
    {
        defaultIn(node);
    }

    public void outAC1(AC1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAC1(AC1 node)
    {
        inAC1(node);
        if(node.getCx() != null)
        {
            node.getCx().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getCy() != null)
        {
            node.getCy().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getR0() != null)
        {
            node.getR0().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getD() != null)
        {
            node.getD().apply(this);
        }
        outAC1(node);
    }

    public void inAR1(AR1 node)
    {
        defaultIn(node);
    }

    public void outAR1(AR1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAR1(AR1 node)
    {
        inAR1(node);
        if(node.getX0() != null)
        {
            node.getX0().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getY0() != null)
        {
            node.getY0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getWidth() != null)
        {
            node.getWidth().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getD() != null)
        {
            node.getD().apply(this);
        }
        if(node.getHeight() != null)
        {
            node.getHeight().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        outAR1(node);
    }

    public void inAE1(AE1 node)
    {
        defaultIn(node);
    }

    public void outAE1(AE1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE1(AE1 node)
    {
        inAE1(node);
        if(node.getCx() != null)
        {
            node.getCx().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getCy() != null)
        {
            node.getCy().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getRx() != null)
        {
            node.getRx().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getD() != null)
        {
            node.getD().apply(this);
        }
        if(node.getRy() != null)
        {
            node.getRy().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        outAE1(node);
    }

    public void inANum(ANum node)
    {
        defaultIn(node);
    }

    public void outANum(ANum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANum(ANum node)
    {
        inANum(node);
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getN() != null)
        {
            node.getN().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outANum(node);
    }

    public void inAP(AP node)
    {
        defaultIn(node);
    }

    public void outAP(AP node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP(AP node)
    {
        inAP(node);
        if(node.getPoints() != null)
        {
            node.getPoints().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getP0() != null)
        {
            node.getP0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAP(node);
    }

    public void inAAP0(AAP0 node)
    {
        defaultIn(node);
    }

    public void outAAP0(AAP0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAP0(AAP0 node)
    {
        inAAP0(node);
        if(node.getP1() != null)
        {
            node.getP1().apply(this);
        }
        outAAP0(node);
    }

    public void inABP0(ABP0 node)
    {
        defaultIn(node);
    }

    public void outABP0(ABP0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABP0(ABP0 node)
    {
        inABP0(node);
        if(node.getP0() != null)
        {
            node.getP0().apply(this);
        }
        if(node.getP1() != null)
        {
            node.getP1().apply(this);
        }
        outABP0(node);
    }

    public void inAP1(AP1 node)
    {
        defaultIn(node);
    }

    public void outAP1(AP1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP1(AP1 node)
    {
        inAP1(node);
        if(node.getN() != null)
        {
            node.getN().apply(this);
        }
        if(node.getComa() != null)
        {
            node.getComa().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAP1(node);
    }

    public void inAS(AS node)
    {
        defaultIn(node);
    }

    public void outAS(AS node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAS(AS node)
    {
        inAS(node);
        if(node.getStyle() != null)
        {
            node.getStyle().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getSp() != null)
        {
            node.getSp().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAS(node);
    }

    public void inAASp(AASp node)
    {
        defaultIn(node);
    }

    public void outAASp(AASp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASp(AASp node)
    {
        inAASp(node);
        if(node.getSp0() != null)
        {
            node.getSp0().apply(this);
        }
        outAASp(node);
    }

    public void inABSp(ABSp node)
    {
        defaultIn(node);
    }

    public void outABSp(ABSp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABSp(ABSp node)
    {
        inABSp(node);
        if(node.getSp() != null)
        {
            node.getSp().apply(this);
        }
        if(node.getSp0() != null)
        {
            node.getSp0().apply(this);
        }
        outABSp(node);
    }

    public void inAASp0(AASp0 node)
    {
        defaultIn(node);
    }

    public void outAASp0(AASp0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASp0(AASp0 node)
    {
        inAASp0(node);
        if(node.getFill() != null)
        {
            node.getFill().apply(this);
        }
        if(node.getDosp() != null)
        {
            node.getDosp().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        outAASp0(node);
    }

    public void inABSp0(ABSp0 node)
    {
        defaultIn(node);
    }

    public void outABSp0(ABSp0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABSp0(ABSp0 node)
    {
        inABSp0(node);
        if(node.getStroke() != null)
        {
            node.getStroke().apply(this);
        }
        if(node.getDosp() != null)
        {
            node.getDosp().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        outABSp0(node);
    }

    public void inACSp0(ACSp0 node)
    {
        defaultIn(node);
    }

    public void outACSp0(ACSp0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACSp0(ACSp0 node)
    {
        inACSp0(node);
        if(node.getStrokew() != null)
        {
            node.getStrokew().apply(this);
        }
        if(node.getDosp() != null)
        {
            node.getDosp().apply(this);
        }
        if(node.getN() != null)
        {
            node.getN().apply(this);
        }
        outACSp0(node);
    }
}

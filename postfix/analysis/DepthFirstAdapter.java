/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.analysis;

import java.util.*;
import postfix.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getSvg1() != null)
        {
            node.getSvg1().apply(this);
        }
        if(node.getPr() != null)
        {
            node.getPr().apply(this);
        }
        if(node.getSvg2() != null)
        {
            node.getSvg2().apply(this);
        }
        outAStart(node);
    }

    public void inAAPr(AAPr node)
    {
        defaultIn(node);
    }

    public void outAAPr(AAPr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPr(AAPr node)
    {
        inAAPr(node);
        if(node.getPr1() != null)
        {
            node.getPr1().apply(this);
        }
        outAAPr(node);
    }

    public void inABPr(ABPr node)
    {
        defaultIn(node);
    }

    public void outABPr(ABPr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABPr(ABPr node)
    {
        inABPr(node);
        if(node.getPr() != null)
        {
            node.getPr().apply(this);
        }
        if(node.getPr1() != null)
        {
            node.getPr1().apply(this);
        }
        outABPr(node);
    }

    public void inAAPr1(AAPr1 node)
    {
        defaultIn(node);
    }

    public void outAAPr1(AAPr1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPr1(AAPr1 node)
    {
        inAAPr1(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getS() != null)
        {
            node.getS().apply(this);
        }
        if(node.getMayus() != null)
        {
            node.getMayus().apply(this);
        }
        outAAPr1(node);
    }

    public void inABPr1(ABPr1 node)
    {
        defaultIn(node);
    }

    public void outABPr1(ABPr1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABPr1(ABPr1 node)
    {
        inABPr1(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getMayus() != null)
        {
            node.getMayus().apply(this);
        }
        outABPr1(node);
    }

    public void inAAA(AAA node)
    {
        defaultIn(node);
    }

    public void outAAA(AAA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAA(AAA node)
    {
        inAAA(node);
        if(node.getLine() != null)
        {
            node.getLine().apply(this);
        }
        if(node.getL1() != null)
        {
            node.getL1().apply(this);
        }
        outAAA(node);
    }

    public void inABA(ABA node)
    {
        defaultIn(node);
    }

    public void outABA(ABA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABA(ABA node)
    {
        inABA(node);
        if(node.getCircle() != null)
        {
            node.getCircle().apply(this);
        }
        if(node.getC1() != null)
        {
            node.getC1().apply(this);
        }
        outABA(node);
    }

    public void inACA(ACA node)
    {
        defaultIn(node);
    }

    public void outACA(ACA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACA(ACA node)
    {
        inACA(node);
        if(node.getRect() != null)
        {
            node.getRect().apply(this);
        }
        if(node.getR1() != null)
        {
            node.getR1().apply(this);
        }
        outACA(node);
    }

    public void inADA(ADA node)
    {
        defaultIn(node);
    }

    public void outADA(ADA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADA(ADA node)
    {
        inADA(node);
        if(node.getEllipse() != null)
        {
            node.getEllipse().apply(this);
        }
        if(node.getE1() != null)
        {
            node.getE1().apply(this);
        }
        outADA(node);
    }

    public void inAEA(AEA node)
    {
        defaultIn(node);
    }

    public void outAEA(AEA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEA(AEA node)
    {
        inAEA(node);
        if(node.getPolygon() != null)
        {
            node.getPolygon().apply(this);
        }
        if(node.getP() != null)
        {
            node.getP().apply(this);
        }
        outAEA(node);
    }

    public void inAFA(AFA node)
    {
        defaultIn(node);
    }

    public void outAFA(AFA node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFA(AFA node)
    {
        inAFA(node);
        if(node.getPolyline() != null)
        {
            node.getPolyline().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAFA(node);
    }

    public void inAL1(AL1 node)
    {
        defaultIn(node);
    }

    public void outAL1(AL1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAL1(AL1 node)
    {
        inAL1(node);
        if(node.getX1() != null)
        {
            node.getX1().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getY1() != null)
        {
            node.getY1().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getX2() != null)
        {
            node.getX2().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getD() != null)
        {
            node.getD().apply(this);
        }
        if(node.getY2() != null)
        {
            node.getY2().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        outAL1(node);
    }

    public void inAC1(AC1 node)
    {
        defaultIn(node);
    }

    public void outAC1(AC1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAC1(AC1 node)
    {
        inAC1(node);
        if(node.getCx() != null)
        {
            node.getCx().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getCy() != null)
        {
            node.getCy().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getR0() != null)
        {
            node.getR0().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getD() != null)
        {
            node.getD().apply(this);
        }
        outAC1(node);
    }

    public void inAR1(AR1 node)
    {
        defaultIn(node);
    }

    public void outAR1(AR1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAR1(AR1 node)
    {
        inAR1(node);
        if(node.getX0() != null)
        {
            node.getX0().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getY0() != null)
        {
            node.getY0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getWidth() != null)
        {
            node.getWidth().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getD() != null)
        {
            node.getD().apply(this);
        }
        if(node.getHeight() != null)
        {
            node.getHeight().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        outAR1(node);
    }

    public void inAE1(AE1 node)
    {
        defaultIn(node);
    }

    public void outAE1(AE1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAE1(AE1 node)
    {
        inAE1(node);
        if(node.getCx() != null)
        {
            node.getCx().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        if(node.getCy() != null)
        {
            node.getCy().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getRx() != null)
        {
            node.getRx().apply(this);
        }
        if(node.getC() != null)
        {
            node.getC().apply(this);
        }
        if(node.getD() != null)
        {
            node.getD().apply(this);
        }
        if(node.getRy() != null)
        {
            node.getRy().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getF() != null)
        {
            node.getF().apply(this);
        }
        outAE1(node);
    }

    public void inANum(ANum node)
    {
        defaultIn(node);
    }

    public void outANum(ANum node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANum(ANum node)
    {
        inANum(node);
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getN() != null)
        {
            node.getN().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outANum(node);
    }

    public void inAP(AP node)
    {
        defaultIn(node);
    }

    public void outAP(AP node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP(AP node)
    {
        inAP(node);
        if(node.getPoints() != null)
        {
            node.getPoints().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getP0() != null)
        {
            node.getP0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAP(node);
    }

    public void inAAP0(AAP0 node)
    {
        defaultIn(node);
    }

    public void outAAP0(AAP0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAP0(AAP0 node)
    {
        inAAP0(node);
        if(node.getP1() != null)
        {
            node.getP1().apply(this);
        }
        outAAP0(node);
    }

    public void inABP0(ABP0 node)
    {
        defaultIn(node);
    }

    public void outABP0(ABP0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABP0(ABP0 node)
    {
        inABP0(node);
        if(node.getP0() != null)
        {
            node.getP0().apply(this);
        }
        if(node.getP1() != null)
        {
            node.getP1().apply(this);
        }
        outABP0(node);
    }

    public void inAP1(AP1 node)
    {
        defaultIn(node);
    }

    public void outAP1(AP1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAP1(AP1 node)
    {
        inAP1(node);
        if(node.getN() != null)
        {
            node.getN().apply(this);
        }
        if(node.getComa() != null)
        {
            node.getComa().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAP1(node);
    }

    public void inAAS(AAS node)
    {
        defaultIn(node);
    }

    public void outAAS(AAS node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAS(AAS node)
    {
        inAAS(node);
        if(node.getSp1() != null)
        {
            node.getSp1().apply(this);
        }
        outAAS(node);
    }

    public void inABS(ABS node)
    {
        defaultIn(node);
    }

    public void outABS(ABS node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABS(ABS node)
    {
        inABS(node);
        if(node.getStyle() != null)
        {
            node.getStyle().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getSp2() != null)
        {
            node.getSp2().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outABS(node);
    }

    public void inAASp1(AASp1 node)
    {
        defaultIn(node);
    }

    public void outAASp1(AASp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASp1(AASp1 node)
    {
        inAASp1(node);
        if(node.getSp3() != null)
        {
            node.getSp3().apply(this);
        }
        outAASp1(node);
    }

    public void inABSp1(ABSp1 node)
    {
        defaultIn(node);
    }

    public void outABSp1(ABSp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABSp1(ABSp1 node)
    {
        inABSp1(node);
        if(node.getSp1() != null)
        {
            node.getSp1().apply(this);
        }
        if(node.getSp3() != null)
        {
            node.getSp3().apply(this);
        }
        outABSp1(node);
    }

    public void inAASp2(AASp2 node)
    {
        defaultIn(node);
    }

    public void outAASp2(AASp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASp2(AASp2 node)
    {
        inAASp2(node);
        if(node.getSp4() != null)
        {
            node.getSp4().apply(this);
        }
        outAASp2(node);
    }

    public void inABSp2(ABSp2 node)
    {
        defaultIn(node);
    }

    public void outABSp2(ABSp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABSp2(ABSp2 node)
    {
        inABSp2(node);
        if(node.getSp2() != null)
        {
            node.getSp2().apply(this);
        }
        if(node.getPc() != null)
        {
            node.getPc().apply(this);
        }
        if(node.getSp4() != null)
        {
            node.getSp4().apply(this);
        }
        outABSp2(node);
    }

    public void inAASp3(AASp3 node)
    {
        defaultIn(node);
    }

    public void outAASp3(AASp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASp3(AASp3 node)
    {
        inAASp3(node);
        if(node.getFill() != null)
        {
            node.getFill().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outAASp3(node);
    }

    public void inABSp3(ABSp3 node)
    {
        defaultIn(node);
    }

    public void outABSp3(ABSp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABSp3(ABSp3 node)
    {
        inABSp3(node);
        if(node.getStroke() != null)
        {
            node.getStroke().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getCo() != null)
        {
            node.getCo().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        outABSp3(node);
    }

    public void inACSp3(ACSp3 node)
    {
        defaultIn(node);
    }

    public void outACSp3(ACSp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACSp3(ACSp3 node)
    {
        inACSp3(node);
        if(node.getStrokew() != null)
        {
            node.getStrokew().apply(this);
        }
        if(node.getIg() != null)
        {
            node.getIg().apply(this);
        }
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outACSp3(node);
    }

    public void inAASp4(AASp4 node)
    {
        defaultIn(node);
    }

    public void outAASp4(AASp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASp4(AASp4 node)
    {
        inAASp4(node);
        if(node.getFill() != null)
        {
            node.getFill().apply(this);
        }
        if(node.getDosp() != null)
        {
            node.getDosp().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        outAASp4(node);
    }

    public void inABSp4(ABSp4 node)
    {
        defaultIn(node);
    }

    public void outABSp4(ABSp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABSp4(ABSp4 node)
    {
        inABSp4(node);
        if(node.getStroke() != null)
        {
            node.getStroke().apply(this);
        }
        if(node.getDosp() != null)
        {
            node.getDosp().apply(this);
        }
        if(node.getC0() != null)
        {
            node.getC0().apply(this);
        }
        outABSp4(node);
    }

    public void inACSp4(ACSp4 node)
    {
        defaultIn(node);
    }

    public void outACSp4(ACSp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACSp4(ACSp4 node)
    {
        inACSp4(node);
        if(node.getStrokew() != null)
        {
            node.getStrokew().apply(this);
        }
        if(node.getDosp() != null)
        {
            node.getDosp().apply(this);
        }
        if(node.getN() != null)
        {
            node.getN().apply(this);
        }
        outACSp4(node);
    }
}

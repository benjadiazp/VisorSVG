/* This file was generated by SableCC (http://www.sablecc.org/). */

package svg.node;

import svg.analysis.*;

@SuppressWarnings("nls")
public final class AC2 extends PC2
{
    private PCoorcx _coorcx_;
    private PCoorcy _coorcy_;
    private PRad _rad_;

    public AC2()
    {
        // Constructor
    }

    public AC2(
        @SuppressWarnings("hiding") PCoorcx _coorcx_,
        @SuppressWarnings("hiding") PCoorcy _coorcy_,
        @SuppressWarnings("hiding") PRad _rad_)
    {
        // Constructor
        setCoorcx(_coorcx_);

        setCoorcy(_coorcy_);

        setRad(_rad_);

    }

    @Override
    public Object clone()
    {
        return new AC2(
            cloneNode(this._coorcx_),
            cloneNode(this._coorcy_),
            cloneNode(this._rad_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAC2(this);
    }

    public PCoorcx getCoorcx()
    {
        return this._coorcx_;
    }

    public void setCoorcx(PCoorcx node)
    {
        if(this._coorcx_ != null)
        {
            this._coorcx_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._coorcx_ = node;
    }

    public PCoorcy getCoorcy()
    {
        return this._coorcy_;
    }

    public void setCoorcy(PCoorcy node)
    {
        if(this._coorcy_ != null)
        {
            this._coorcy_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._coorcy_ = node;
    }

    public PRad getRad()
    {
        return this._rad_;
    }

    public void setRad(PRad node)
    {
        if(this._rad_ != null)
        {
            this._rad_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rad_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._coorcx_)
            + toString(this._coorcy_)
            + toString(this._rad_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._coorcx_ == child)
        {
            this._coorcx_ = null;
            return;
        }

        if(this._coorcy_ == child)
        {
            this._coorcy_ = null;
            return;
        }

        if(this._rad_ == child)
        {
            this._rad_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._coorcx_ == oldChild)
        {
            setCoorcx((PCoorcx) newChild);
            return;
        }

        if(this._coorcy_ == oldChild)
        {
            setCoorcy((PCoorcy) newChild);
            return;
        }

        if(this._rad_ == oldChild)
        {
            setRad((PRad) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package svg.node;

import svg.analysis.*;

@SuppressWarnings("nls")
public final class AE0 extends PE0
{
    private PCoorcx _coorcx_;
    private PCoorcy _coorcy_;
    private PRadx _radx_;
    private PRady _rady_;

    public AE0()
    {
        // Constructor
    }

    public AE0(
        @SuppressWarnings("hiding") PCoorcx _coorcx_,
        @SuppressWarnings("hiding") PCoorcy _coorcy_,
        @SuppressWarnings("hiding") PRadx _radx_,
        @SuppressWarnings("hiding") PRady _rady_)
    {
        // Constructor
        setCoorcx(_coorcx_);

        setCoorcy(_coorcy_);

        setRadx(_radx_);

        setRady(_rady_);

    }

    @Override
    public Object clone()
    {
        return new AE0(
            cloneNode(this._coorcx_),
            cloneNode(this._coorcy_),
            cloneNode(this._radx_),
            cloneNode(this._rady_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAE0(this);
    }

    public PCoorcx getCoorcx()
    {
        return this._coorcx_;
    }

    public void setCoorcx(PCoorcx node)
    {
        if(this._coorcx_ != null)
        {
            this._coorcx_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._coorcx_ = node;
    }

    public PCoorcy getCoorcy()
    {
        return this._coorcy_;
    }

    public void setCoorcy(PCoorcy node)
    {
        if(this._coorcy_ != null)
        {
            this._coorcy_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._coorcy_ = node;
    }

    public PRadx getRadx()
    {
        return this._radx_;
    }

    public void setRadx(PRadx node)
    {
        if(this._radx_ != null)
        {
            this._radx_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._radx_ = node;
    }

    public PRady getRady()
    {
        return this._rady_;
    }

    public void setRady(PRady node)
    {
        if(this._rady_ != null)
        {
            this._rady_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rady_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._coorcx_)
            + toString(this._coorcy_)
            + toString(this._radx_)
            + toString(this._rady_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._coorcx_ == child)
        {
            this._coorcx_ = null;
            return;
        }

        if(this._coorcy_ == child)
        {
            this._coorcy_ = null;
            return;
        }

        if(this._radx_ == child)
        {
            this._radx_ = null;
            return;
        }

        if(this._rady_ == child)
        {
            this._rady_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._coorcx_ == oldChild)
        {
            setCoorcx((PCoorcx) newChild);
            return;
        }

        if(this._coorcy_ == oldChild)
        {
            setCoorcy((PCoorcy) newChild);
            return;
        }

        if(this._radx_ == oldChild)
        {
            setRadx((PRadx) newChild);
            return;
        }

        if(this._rady_ == oldChild)
        {
            setRady((PRady) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
